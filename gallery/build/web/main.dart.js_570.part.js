// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.0-167.0.dev.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_570", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A, C,
  B = {RenderAspectRatio: function RenderAspectRatio(t0, t1, t2, t3) {
      var _ = this;
      _._aspectRatio = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._layoutCacheStorage = t2;
      _._computingThisDryBaseline = _._computingThisDryLayout = false;
      _._box$_size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.parentData = null;
      _._depth = 0;
      _.debugCreator = _._object$_parent = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._object$_owner = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    }, AspectRatio: function AspectRatio(t0, t1, t2) {
      this.aspectRatio = t0;
      this.child = t1;
      this.key = t2;
    }};
  A = holdersList[0];
  C = holdersList[2];
  B = hunkHelpers.updateHolder(holdersList[107], B);
  B.RenderAspectRatio.prototype = {
    set$aspectRatio(_, value) {
      if (this._aspectRatio === value)
        return;
      this._aspectRatio = value;
      this.markNeedsLayout$0();
    },
    computeMinIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      if (isFinite(height))
        return height * this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(C._IntrinsicDimension_0, height, t1.get$computeMinIntrinsicWidth(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      if (isFinite(height))
        return height * this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(C._IntrinsicDimension_1, height, t1.get$computeMaxIntrinsicWidth(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMinIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      if (isFinite(width))
        return width / this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(C._IntrinsicDimension_2, width, t1.get$computeMinIntrinsicHeight(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      if (isFinite(width))
        return width / this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(C._IntrinsicDimension_3, width, t1.get$computeMaxIntrinsicHeight(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    _applyAspectRatio$1(constraints) {
      var t1, height, width1, height0,
        width = constraints.minWidth,
        width0 = constraints.maxWidth;
      if (width >= width0 && constraints.minHeight >= constraints.maxHeight)
        return new A.Size(A.clampDouble(0, width, width0), A.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      t1 = this._aspectRatio;
      if (isFinite(width0)) {
        height = width0 / t1;
        width1 = width0;
      } else {
        height = constraints.maxHeight;
        width1 = height * t1;
      }
      if (width1 > width0)
        height = width0 / t1;
      else
        width0 = width1;
      height0 = constraints.maxHeight;
      if (height > height0) {
        width0 = height0 * t1;
        height = height0;
      }
      if (width0 < width)
        height = width / t1;
      else
        width = width0;
      height0 = constraints.minHeight;
      if (height < height0) {
        width = height0 * t1;
        height = height0;
      }
      return constraints.constrain$1(new A.Size(width, height));
    },
    computeDryLayout$1(constraints) {
      return this._applyAspectRatio$1(constraints);
    },
    computeDryBaseline$2(constraints, baseline) {
      var t1 = type$.BoxConstraints;
      t1._as(constraints);
      type$.TextBaseline._as(baseline);
      return this.super$RenderProxyBoxMixin$computeDryBaseline(A.BoxConstraints$tight(this._computeIntrinsics$2$3(C.C__DryLayout, constraints, this.get$_computeDryLayout(), t1, type$.Size)), baseline);
    },
    performLayout$0() {
      var _this = this,
        t1 = type$.BoxConstraints;
      _this._box$_size = _this._computeIntrinsics$2$3(C.C__DryLayout, t1._as(A.RenderObject.prototype.get$constraints.call(_this)), _this.get$_computeDryLayout(), t1, type$.Size);
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.layout$1(A.BoxConstraints$tight(_this.get$size(0)));
    }
  };
  B.AspectRatio.prototype = {
    createRenderObject$1(context) {
      var t1 = new B.RenderAspectRatio(this.aspectRatio, null, new A._LayoutCacheStorage(), A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$.RenderAspectRatio._as(renderObject).set$aspectRatio(0, this.aspectRatio);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["double(double)"]);
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    var _;
    _instance_1_u(_ = B.RenderAspectRatio.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 0);
  })();
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.RenderAspectRatio, A.RenderProxyBox);
    _inherit(B.AspectRatio, A.SingleChildRenderObjectWidget);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"RenderAspectRatio":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"AspectRatio":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    BoxConstraints: A.findType("BoxConstraints"),
    ContainerLayer: A.findType("ContainerLayer0"),
    RenderAspectRatio: A.findType("RenderAspectRatio"),
    Size: A.findType("Size"),
    TextBaseline: A.findType("TextBaseline"),
    double: A.findType("double")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_570", e: "endPart", h: h});
})($__dart_deferred_initializers__, "rdDnvNgpU+A3vXEHdyWGZj3fDj0=");
;