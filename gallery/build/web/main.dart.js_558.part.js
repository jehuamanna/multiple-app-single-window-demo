// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.0-167.0.dev.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_558", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A,
  B = {
    IndexedIterable_IndexedIterable(source, start, $T) {
      return new B.EfficientLengthIndexedIterable(source, start, $T._eval$1("EfficientLengthIndexedIterable<0>"));
    },
    IndexedIterable: function IndexedIterable(t0, t1, t2) {
      this._source = t0;
      this._start = t1;
      this.$ti = t2;
    },
    EfficientLengthIndexedIterable: function EfficientLengthIndexedIterable(t0, t1, t2) {
      this._source = t0;
      this._start = t1;
      this.$ti = t2;
    },
    IndexedIterator: function IndexedIterator(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _._start = t1;
      _.__internal$_index = -1;
      _.$ti = t2;
    }
  };
  J = holdersList[1];
  A = holdersList[0];
  B = hunkHelpers.updateHolder(holdersList[110], B);
  B.IndexedIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._source);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._source);
    },
    get$first(_) {
      return new A._Record_2(this._start, J.get$first$ax(this._source));
    },
    elementAt$1(_, index) {
      return new A._Record_2(index + this._start, J.elementAt$1$ax(this._source, index));
    },
    contains$1(_, element) {
      var _0_2, _0_3, t1, other, index, iterator, _null = null;
      if (type$.Record_2_nullable_Object_and_nullable_Object._is(element)) {
        _0_2 = element._0;
        if (A._isInt(_0_2)) {
          A._asInt(_0_2);
          _0_3 = element._1;
          t1 = _0_2 >= this._start;
          other = _0_3;
          index = _0_2;
        } else {
          other = _null;
          index = other;
          t1 = false;
        }
      } else {
        other = _null;
        index = other;
        t1 = false;
      }
      if (t1) {
        if (typeof index !== "number")
          return index.$sub();
        t1 = J.skip$1$ax(this._source, index - this._start);
        iterator = t1.get$iterator(t1);
        return iterator.moveNext$0() && J.$eq$(iterator.get$current(iterator), other);
      }
      return false;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new B.IndexedIterable(J.skip$1$ax(this._source, count), count + this._start, A._instanceType(this)._eval$1("IndexedIterable<1>"));
    },
    get$iterator(_) {
      return new B.IndexedIterator(J.get$iterator$ax(this._source), this._start, A._instanceType(this)._eval$1("IndexedIterator<1>"));
    }
  };
  B.EfficientLengthIndexedIterable.prototype = {
    get$last(_) {
      var last,
        t1 = this._source,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if ($length <= 0)
        throw A.wrapException(A.IterableElementError_noElement());
      last = t2.get$last(t1);
      if ($length !== t2.get$length(t1))
        throw A.wrapException(A.ConcurrentModificationError$(this));
      return new A._Record_2($length - 1 + this._start, last);
    },
    contains$1(_, element) {
      var _0_2, _0_3, t1, other, index, unbiasedIndex, t2, _null = null;
      if (type$.Record_2_nullable_Object_and_nullable_Object._is(element)) {
        _0_2 = element._0;
        if (A._isInt(_0_2)) {
          A._asInt(_0_2);
          _0_3 = element._1;
          t1 = _0_2 >= this._start;
          other = _0_3;
          index = _0_2;
        } else {
          other = _null;
          index = other;
          t1 = false;
        }
      } else {
        other = _null;
        index = other;
        t1 = false;
      }
      if (t1) {
        if (typeof index !== "number")
          return index.$sub();
        unbiasedIndex = index - this._start;
        t1 = this._source;
        t2 = J.getInterceptor$asx(t1);
        return unbiasedIndex < t2.get$length(t1) && J.$eq$(t2.elementAt$1(t1, unbiasedIndex), other);
      }
      return false;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new B.EfficientLengthIndexedIterable(J.skip$1$ax(this._source, count), this._start + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  B.IndexedIterator.prototype = {
    moveNext$0() {
      if (++this.__internal$_index >= 0 && this._source.moveNext$0())
        return true;
      this.__internal$_index = -2;
      return false;
    },
    get$current(_) {
      var t2,
        t1 = this.__internal$_index;
      if (t1 >= 0) {
        t2 = this._source;
        t2 = new A._Record_2(this._start + t1, t2.get$current(t2));
        t1 = t2;
      } else
        t1 = A.throwExpression(A.IterableElementError_noElement());
      return t1;
    },
    $isIterator: 1
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.IndexedIterable, A.Iterable);
    _inherit(B.EfficientLengthIndexedIterable, B.IndexedIterable);
    _inherit(B.IndexedIterator, A.Object);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"IndexedIterable":{"Iterable":["+(int,1)"],"Iterable.E":"+(int,1)"},"EfficientLengthIndexedIterable":{"IndexedIterable":["1"],"EfficientLengthIterable":["+(int,1)"],"Iterable":["+(int,1)"],"Iterable.E":"+(int,1)"},"IndexedIterator":{"Iterator":["+(int,1)"]}}'));
  var type$ = {
    Record_2_nullable_Object_and_nullable_Object: A.findType("+(Object?,Object?)"),
    int: A.findType("int")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_558", e: "endPart", h: h});
})($__dart_deferred_initializers__, "OFXMmXevLGKpEAJ+s7oct5c/z14=");
;