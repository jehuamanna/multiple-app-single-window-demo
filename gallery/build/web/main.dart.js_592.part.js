// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.0-167.0.dev.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_592", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, C, E,
  A = {
    InteractiveViewer_getNearestPointOnLine(point, l1, l2) {
      var l1P, l1L2,
        t1 = l2._v3storage,
        t2 = l1._v3storage,
        lengthSquared = Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2);
      if (lengthSquared === 0)
        return l1;
      l1P = point.$sub(0, l1);
      l1L2 = l2.$sub(0, l1);
      return l1.$add(0, l1L2.scaled$1(B.clampDouble(l1P.dot$1(l1L2) / lengthSquared, 0, 1)));
    },
    InteractiveViewer_getNearestPointInside(point, quad) {
      var t4, closestPoints, closestOverall, minDistance, _i, closePoint, distance,
        t1 = quad._point0,
        aM = point.$sub(0, t1),
        t2 = quad._point1,
        aB = t2.$sub(0, t1),
        t3 = quad._point3,
        aD = t3.$sub(0, t1),
        aMAB = aM.dot$1(aB),
        aBAB = aB.dot$1(aB),
        aMAD = aM.dot$1(aD),
        aDAD = aD.dot$1(aD);
      if (0 <= aMAB && aMAB <= aBAB && 0 <= aMAD && aMAD <= aDAD)
        return point;
      t4 = quad._point2;
      closestPoints = [A.InteractiveViewer_getNearestPointOnLine(point, t1, t2), A.InteractiveViewer_getNearestPointOnLine(point, t2, t4), A.InteractiveViewer_getNearestPointOnLine(point, t4, t3), A.InteractiveViewer_getNearestPointOnLine(point, t3, t1)];
      closestOverall = B._Cell$named("closestOverall");
      for (t1 = point._v3storage, minDistance = 1 / 0, _i = 0; _i < 4; ++_i) {
        closePoint = closestPoints[_i];
        t2 = closePoint._v3storage;
        distance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));
        if (distance < minDistance) {
          closestOverall._value = closePoint;
          minDistance = distance;
        }
      }
      return closestOverall._readLocal$0();
    },
    TransformationController$() {
      var t1 = new B.Matrix40(new Float64Array(16));
      t1.setIdentity$0();
      return new A.TransformationController(t1, $.$get$ChangeNotifier__emptyListeners());
    },
    _getFinalTime(velocity, drag, effectivelyMotionless) {
      return Math.log(effectivelyMotionless / velocity) / Math.log(drag / 100);
    },
    _transformViewport(matrix, viewport) {
      var t1, t2, t3, t4, t5, t6,
        inverseMatrix = new B.Matrix40(new Float64Array(16));
      inverseMatrix.setFrom$1(matrix);
      inverseMatrix.copyInverse$1(inverseMatrix);
      t1 = viewport.left;
      t2 = viewport.top;
      t3 = new B.Vector3(new Float64Array(3));
      t3.setValues$3(t1, t2, 0);
      t3 = inverseMatrix.transform3$1(t3);
      t4 = viewport.right;
      t5 = new B.Vector3(new Float64Array(3));
      t5.setValues$3(t4, t2, 0);
      t5 = inverseMatrix.transform3$1(t5);
      t2 = viewport.bottom;
      t6 = new B.Vector3(new Float64Array(3));
      t6.setValues$3(t4, t2, 0);
      t6 = inverseMatrix.transform3$1(t6);
      t4 = new B.Vector3(new Float64Array(3));
      t4.setValues$3(t1, t2, 0);
      t4 = inverseMatrix.transform3$1(t4);
      t1 = new B.Vector3(new Float64Array(3));
      t1.setFrom$1(t3);
      t2 = new B.Vector3(new Float64Array(3));
      t2.setFrom$1(t5);
      t3 = new B.Vector3(new Float64Array(3));
      t3.setFrom$1(t6);
      t5 = new B.Vector3(new Float64Array(3));
      t5.setFrom$1(t4);
      return new A.Quad(t1, t2, t3, t5);
    },
    _exceedsBy(boundary, viewport) {
      var largestExcess, _i, point, t1, t2, t3,
        viewportPoints = [viewport._point0, viewport._point1, viewport._point2, viewport._point3];
      for (largestExcess = C.Offset_0_0, _i = 0; _i < 4; ++_i) {
        point = viewportPoints[_i];
        t1 = A.InteractiveViewer_getNearestPointInside(point, boundary)._v3storage;
        t2 = point._v3storage;
        t3 = t1[0] - t2[0];
        t2 = t1[1] - t2[1];
        if (Math.abs(t3) > Math.abs(largestExcess._dx))
          largestExcess = new B.Offset(t3, largestExcess._dy);
        if (Math.abs(t2) > Math.abs(largestExcess._dy))
          largestExcess = new B.Offset(largestExcess._dx, t2);
      }
      return A._round(largestExcess);
    },
    _round(offset) {
      return new B.Offset(B.double_parse(C.JSNumber_methods.toStringAsFixed$1(offset._dx, 9)), B.double_parse(C.JSNumber_methods.toStringAsFixed$1(offset._dy, 9)));
    },
    _getPanAxis(point1, point2) {
      if (point1.$eq(0, point2))
        return null;
      return Math.abs(point2._dx - point1._dx) > Math.abs(point2._dy - point1._dy) ? C.Axis_0 : C.Axis_1;
    },
    InteractiveViewer: function InteractiveViewer(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.boundaryMargin = t0;
      _.child = t1;
      _.minScale = t2;
      _.onInteractionStart = t3;
      _.transformationController = t4;
      _.key = t5;
    },
    _InteractiveViewerState: function _InteractiveViewerState(t0, t1, t2, t3, t4) {
      var _ = this;
      _._interactive_viewer$_transformationController = null;
      _._childKey = t0;
      _._parentKey = t1;
      _._scaleAnimation = _._interactive_viewer$_animation = null;
      _.___InteractiveViewerState__scaleController_A = _.___InteractiveViewerState__controller_A = _.___InteractiveViewerState__scaleAnimationFocalPoint_A = $;
      _._scaleStart = _._referenceFocalPoint = _._currentAxis = null;
      _._currentRotation = _._rotationStart = 0;
      _._gestureType = null;
      _.TickerProviderStateMixin__tickers = t2;
      _.TickerProviderStateMixin__tickerModeNotifier = t3;
      _._widget = null;
      _._debugLifecycleState = t4;
      _._framework$_element = null;
    },
    _InteractiveViewerState__onTransformationControllerChange_closure: function _InteractiveViewerState__onTransformationControllerChange_closure() {
    },
    _InteractiveViewerBuilt: function _InteractiveViewerBuilt(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.child = t0;
      _.childKey = t1;
      _.clipBehavior = t2;
      _.constrained = t3;
      _.matrix = t4;
      _.alignment = t5;
      _.key = t6;
    },
    TransformationController: function TransformationController(t0, t1) {
      var _ = this;
      _._change_notifier$_value = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    _GestureType: function _GestureType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    PanAxis: function PanAxis(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    __InteractiveViewerState_State_TickerProviderStateMixin: function __InteractiveViewerState_State_TickerProviderStateMixin() {
    },
    TransformationsDemo$() {
      return new A.TransformationsDemo(null);
    },
    TransformationsDemo: function TransformationsDemo(t0) {
      this.key = t0;
    },
    _TransformationsDemoState: function _TransformationsDemoState(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._targetKey = t0;
      _._board = t1;
      _._transformationController = t2;
      _._animationReset = null;
      _.___TransformationsDemoState__controllerReset_A = $;
      _._homeMatrix = null;
      _.TickerProviderStateMixin__tickers = t3;
      _.TickerProviderStateMixin__tickerModeNotifier = t4;
      _._widget = null;
      _._debugLifecycleState = t5;
      _._framework$_element = null;
    },
    _TransformationsDemoState__onTapUp_closure: function _TransformationsDemoState__onTapUp_closure(t0, t1) {
      this.$this = t0;
      this.boardPoint = t1;
    },
    _TransformationsDemoState_build_closure: function _TransformationsDemoState_build_closure(t0) {
      this.$this = t0;
    },
    _TransformationsDemoState_resetButton_closure: function _TransformationsDemoState_resetButton_closure(t0) {
      this.$this = t0;
    },
    _TransformationsDemoState_resetButton__closure: function _TransformationsDemoState_resetButton__closure(t0) {
      this.$this = t0;
    },
    _TransformationsDemoState_editButton_closure: function _TransformationsDemoState_editButton_closure(t0) {
      this.$this = t0;
    },
    _TransformationsDemoState_editButton__closure: function _TransformationsDemoState_editButton__closure(t0) {
      this.$this = t0;
    },
    _TransformationsDemoState_editButton___closure: function _TransformationsDemoState_editButton___closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    _TransformationsDemoState_editButton____closure: function _TransformationsDemoState_editButton____closure(t0, t1, t2) {
      this.$this = t0;
      this.color = t1;
      this.context = t2;
    },
    _BoardPainter: function _BoardPainter(t0, t1) {
      this.board = t0;
      this._repaint = t1;
    },
    _BoardPainter_paint_drawBoardPoint: function _BoardPainter_paint_drawBoardPoint(t0, t1) {
      this.$this = t0;
      this.canvas = t1;
    },
    __TransformationsDemoState_State_TickerProviderStateMixin: function __TransformationsDemoState_State_TickerProviderStateMixin() {
    },
    Board$(boardPoints, boardRadius, hexagonMargin, hexagonRadius, selected) {
      var t1 = new A.Board(boardRadius, hexagonRadius, hexagonMargin, B._setArrayType([], type$.JSArray_Offset), selected, B._setArrayType([], type$.JSArray_BoardPoint));
      t1.Board$5$boardPoints$boardRadius$hexagonMargin$hexagonRadius$selected(boardPoints, boardRadius, hexagonMargin, hexagonRadius, selected);
      return t1;
    },
    Board: function Board(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.boardRadius = t0;
      _.hexagonRadius = t1;
      _.hexagonMargin = t2;
      _.positionsForHexagonAtOrigin = t3;
      _.selected = t4;
      _._boardPoints = t5;
    },
    Board_pointToBoardPoint_closure: function Board_pointToBoardPoint_closure(t0) {
      this.boardPoint = t0;
    },
    Board_getVerticesForBoardPoint_closure: function Board_getVerticesForBoardPoint_closure(t0) {
      this.centerOfHexZeroCenter = t0;
    },
    Board_copyWithBoardPointColor_closure: function Board_copyWithBoardPointColor_closure(t0) {
      this.boardPoint = t0;
    },
    _BoardIterator: function _BoardIterator(t0) {
      this.boardPoints = t0;
      this.current = this.currentIndex = null;
    },
    _Range: function _Range(t0, t1) {
      this.min = t0;
      this.max = t1;
    },
    BoardPoint: function BoardPoint(t0, t1, t2) {
      this.q = t0;
      this.r = t1;
      this.color = t2;
    },
    _Board_Object_IterableMixin: function _Board_Object_IterableMixin() {
    },
    ColorPicker: function ColorPicker(t0, t1, t2, t3) {
      var _ = this;
      _.colors = t0;
      _.selectedColor = t1;
      _.onColorSelection = t2;
      _.key = t3;
    },
    ColorPicker_build_closure: function ColorPicker_build_closure(t0) {
      this.$this = t0;
    },
    ColorPicker_build__closure: function ColorPicker_build__closure(t0, t1) {
      this.$this = t0;
      this.color = t1;
    },
    _ColorPickerSwatch: function _ColorPickerSwatch(t0, t1, t2, t3) {
      var _ = this;
      _.color = t0;
      _.selected = t1;
      _.onTap = t2;
      _.key = t3;
    },
    _ColorPickerSwatch_build_closure: function _ColorPickerSwatch_build_closure(t0) {
      this.$this = t0;
    },
    EditBoardPoint: function EditBoardPoint(t0, t1, t2) {
      this.boardPoint = t0;
      this.onColorSelection = t1;
      this.key = t2;
    },
    Quad: function Quad(t0, t1, t2, t3) {
      var _ = this;
      _._point0 = t0;
      _._point1 = t1;
      _._point2 = t2;
      _._point3 = t3;
    }
  },
  D, F;
  J = holdersList[1];
  B = holdersList[0];
  C = holdersList[2];
  E = holdersList[101];
  A = hunkHelpers.updateHolder(holdersList[87], A);
  D = holdersList[129];
  F = holdersList[130];
  A.InteractiveViewer.prototype = {
    createState$0() {
      var _null = null,
        t1 = type$.LabeledGlobalKey_State_StatefulWidget;
      return new A._InteractiveViewerState(new B.LabeledGlobalKey(_null, t1), new B.LabeledGlobalKey(_null, t1), _null, _null, C._StateLifecycle_0);
    }
  };
  A._InteractiveViewerState.prototype = {
    get$_boundaryRect() {
      var childSize,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._childKey).get$renderObject();
      t1.toString;
      childSize = type$.RenderBox._as(t1).get$size(0);
      return this._widget.boundaryMargin.inflateRect$1(new B.Rect(0, 0, 0 + childSize._dx, 0 + childSize._dy));
    },
    get$_viewport() {
      var t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._parentKey).get$renderObject();
      t1.toString;
      t1 = type$.RenderBox._as(t1).get$size(0);
      return new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
    },
    _matrixTranslate$2(matrix, translation) {
      var t1, nextMatrix, nextViewport, t2, rotationMatrix, t3, t4, t5, t6, t7, t8, minX, minY, maxX, maxY, boundariesAabbQuad, offendingDistance, currentScale, correctedMatrix, offendingCorrectedDistance, _this = this;
      if (translation.$eq(0, C.Offset_0_0)) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setFrom$1(matrix);
        return t1;
      }
      if (_this._currentAxis != null) {
        _this._widget.toString;
        switch (3) {
          case 3:
            break;
        }
      }
      nextMatrix = new B.Matrix40(new Float64Array(16));
      nextMatrix.setFrom$1(matrix);
      nextMatrix.translate$2(0, translation._dx, translation._dy);
      nextViewport = A._transformViewport(nextMatrix, _this.get$_viewport());
      if (_this.get$_boundaryRect().get$isInfinite(0))
        return nextMatrix;
      t1 = _this.get$_boundaryRect();
      t2 = _this._currentRotation;
      rotationMatrix = new B.Matrix40(new Float64Array(16));
      rotationMatrix.setIdentity$0();
      t3 = t1.right;
      t4 = t1.left;
      t5 = t3 - t4;
      t6 = t1.bottom;
      t1 = t1.top;
      t7 = t6 - t1;
      rotationMatrix.translate$2(0, t5 / 2, t7 / 2);
      rotationMatrix.rotateZ$1(t2);
      rotationMatrix.translate$2(0, -t5 / 2, -t7 / 2);
      t2 = new B.Vector3(new Float64Array(3));
      t2.setValues$3(t4, t1, 0);
      t2 = rotationMatrix.transform3$1(t2);
      t5 = new B.Vector3(new Float64Array(3));
      t5.setValues$3(t3, t1, 0);
      t5 = rotationMatrix.transform3$1(t5);
      t1 = new B.Vector3(new Float64Array(3));
      t1.setValues$3(t3, t6, 0);
      t1 = rotationMatrix.transform3$1(t1);
      t3 = new B.Vector3(new Float64Array(3));
      t3.setValues$3(t4, t6, 0);
      t3 = rotationMatrix.transform3$1(t3);
      t4 = new Float64Array(3);
      new B.Vector3(t4).setFrom$1(t2);
      t2 = new Float64Array(3);
      new B.Vector3(t2).setFrom$1(t5);
      t5 = new Float64Array(3);
      new B.Vector3(t5).setFrom$1(t1);
      t1 = new Float64Array(3);
      new B.Vector3(t1).setFrom$1(t3);
      t3 = t4[0];
      t6 = t2[0];
      t7 = t5[0];
      t8 = t1[0];
      minX = Math.min(t3, Math.min(t6, Math.min(t7, t8)));
      t4 = t4[1];
      t2 = t2[1];
      t5 = t5[1];
      t1 = t1[1];
      minY = Math.min(t4, Math.min(t2, Math.min(t5, t1)));
      maxX = Math.max(t3, Math.max(t6, Math.max(t7, t8)));
      maxY = Math.max(t4, Math.max(t2, Math.max(t5, t1)));
      t1 = new B.Vector3(new Float64Array(3));
      t1.setValues$3(minX, minY, 0);
      t2 = new B.Vector3(new Float64Array(3));
      t2.setValues$3(maxX, minY, 0);
      t3 = new B.Vector3(new Float64Array(3));
      t3.setValues$3(maxX, maxY, 0);
      t4 = new B.Vector3(new Float64Array(3));
      t4.setValues$3(minX, maxY, 0);
      t5 = new B.Vector3(new Float64Array(3));
      t5.setFrom$1(t1);
      t1 = new B.Vector3(new Float64Array(3));
      t1.setFrom$1(t2);
      t2 = new B.Vector3(new Float64Array(3));
      t2.setFrom$1(t3);
      t3 = new B.Vector3(new Float64Array(3));
      t3.setFrom$1(t4);
      boundariesAabbQuad = new A.Quad(t5, t1, t2, t3);
      offendingDistance = A._exceedsBy(boundariesAabbQuad, nextViewport);
      if (offendingDistance.$eq(0, C.Offset_0_0))
        return nextMatrix;
      t1 = nextMatrix.getTranslation$0()._v3storage;
      t2 = t1[0];
      t1 = t1[1];
      currentScale = matrix.getMaxScaleOnAxis$0();
      t2 -= offendingDistance._dx * currentScale;
      t1 -= offendingDistance._dy * currentScale;
      correctedMatrix = new B.Matrix40(new Float64Array(16));
      correctedMatrix.setFrom$1(matrix);
      t3 = new B.Vector3(new Float64Array(3));
      t3.setValues$3(t2, t1, 0);
      correctedMatrix.setTranslation$1(t3);
      offendingCorrectedDistance = A._exceedsBy(boundariesAabbQuad, A._transformViewport(correctedMatrix, _this.get$_viewport()));
      if (offendingCorrectedDistance.$eq(0, C.Offset_0_0))
        return correctedMatrix;
      t3 = offendingCorrectedDistance._dx === 0;
      if (!t3 && offendingCorrectedDistance._dy !== 0) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setFrom$1(matrix);
        return t1;
      }
      t2 = t3 ? t2 : 0;
      t1 = offendingCorrectedDistance._dy === 0 ? t1 : 0;
      t3 = new B.Matrix40(new Float64Array(16));
      t3.setFrom$1(matrix);
      t4 = new B.Vector3(new Float64Array(3));
      t4.setValues$3(t2, t1, 0);
      t3.setTranslation$1(t4);
      return t3;
    },
    _matrixScale$2(matrix, scale) {
      var t1, currentScale, t2, t3, t4, clampedTotalScale, _this = this;
      if (scale === 1) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setFrom$1(matrix);
        return t1;
      }
      currentScale = _this._interactive_viewer$_transformationController._change_notifier$_value.getMaxScaleOnAxis$0();
      t1 = _this.get$_viewport();
      t2 = _this.get$_boundaryRect();
      t3 = _this.get$_viewport();
      t4 = _this.get$_boundaryRect();
      clampedTotalScale = B.clampDouble(Math.max(currentScale * scale, Math.max((t1.right - t1.left) / (t2.right - t2.left), (t3.bottom - t3.top) / (t4.bottom - t4.top))), _this._widget.minScale, 2.5);
      t1 = new B.Matrix40(new Float64Array(16));
      t1.setFrom$1(matrix);
      t1.scale$1(0, clampedTotalScale / currentScale);
      return t1;
    },
    _matrixRotate$3(matrix, rotation, focalPoint) {
      var t1, focalPointScene, t2, t3;
      if (rotation === 0) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setFrom$1(matrix);
        return t1;
      }
      focalPointScene = this._interactive_viewer$_transformationController.toScene$1(focalPoint);
      t1 = new B.Matrix40(new Float64Array(16));
      t1.setFrom$1(matrix);
      t2 = focalPointScene._dx;
      t3 = focalPointScene._dy;
      t1.translate$2(0, t2, t3);
      t1.rotateZ$1(-rotation);
      t1.translate$2(0, -t2, -t3);
      return t1;
    },
    _gestureIsSupported$1(gestureType) {
      var t1;
      $label0$0: {
        if (D._GestureType_2 === gestureType) {
          t1 = false;
          break $label0$0;
        }
        if (D._GestureType_1 === gestureType) {
          this._widget.toString;
          t1 = true;
          break $label0$0;
        }
        if (D._GestureType_0 === gestureType || gestureType == null) {
          this._widget.toString;
          t1 = true;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    _getGestureType$1(details) {
      this._widget.toString;
      if (Math.abs(details.scale - 1) > Math.abs(0))
        return D._GestureType_1;
      else
        return D._GestureType_0;
    },
    _interactive_viewer$_onScaleStart$1(details) {
      var t1, t2, _this = this;
      _this._widget.onInteractionStart.call$1(details);
      t1 = _this.___InteractiveViewerState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t2 = t1._ticker;
      if (t2 != null && t2._ticker$_future != null) {
        t1.stop$0(0);
        t1 = _this.___InteractiveViewerState__controller_A;
        t1.set$value(0, t1.lowerBound);
        t1 = _this._interactive_viewer$_animation;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onAnimate());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_interactive_viewer$_animation(null);
      }
      t1 = _this.___InteractiveViewerState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t2 = t1._ticker;
      if (t2 != null && t2._ticker$_future != null) {
        t1.stop$0(0);
        t1 = _this.___InteractiveViewerState__scaleController_A;
        t1.set$value(0, t1.lowerBound);
        t1 = _this._scaleAnimation;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onScaleAnimate());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_scaleAnimation(null);
      }
      _this._currentAxis = _this._gestureType = null;
      _this._scaleStart = _this._interactive_viewer$_transformationController._change_notifier$_value.getMaxScaleOnAxis$0();
      _this._referenceFocalPoint = _this._interactive_viewer$_transformationController.toScene$1(details.localFocalPoint);
      _this._rotationStart = _this._currentRotation;
    },
    _onScaleUpdate$1(details) {
      var t3, focalPointSceneScaled, t4, focalPointSceneCheck, desiredRotation, translationChange, _this = this,
        scale = _this._interactive_viewer$_transformationController._change_notifier$_value.getMaxScaleOnAxis$0(),
        t1 = _this.___InteractiveViewerState__scaleAnimationFocalPoint_A = details.localFocalPoint,
        focalPointScene = _this._interactive_viewer$_transformationController.toScene$1(t1),
        t2 = _this._gestureType;
      if (t2 === D._GestureType_0)
        t2 = _this._gestureType = _this._getGestureType$1(details);
      else if (t2 == null) {
        t2 = _this._getGestureType$1(details);
        _this._gestureType = t2;
      }
      if (!_this._gestureIsSupported$1(t2)) {
        _this._widget.toString;
        return;
      }
      switch (_this._gestureType.index) {
        case 1:
          t2 = _this._scaleStart;
          t2.toString;
          t3 = _this._interactive_viewer$_transformationController;
          t3.set$value(0, _this._matrixScale$2(t3._change_notifier$_value, t2 * details.scale / scale));
          focalPointSceneScaled = _this._interactive_viewer$_transformationController.toScene$1(t1);
          t2 = _this._interactive_viewer$_transformationController;
          t3 = t2._change_notifier$_value;
          t4 = _this._referenceFocalPoint;
          t4.toString;
          t2.set$value(0, _this._matrixTranslate$2(t3, focalPointSceneScaled.$sub(0, t4)));
          focalPointSceneCheck = _this._interactive_viewer$_transformationController.toScene$1(t1);
          t1 = _this._referenceFocalPoint;
          t1.toString;
          if (!A._round(t1).$eq(0, A._round(focalPointSceneCheck)))
            _this._referenceFocalPoint = focalPointSceneCheck;
          break;
        case 2:
          t2 = details.rotation;
          if (t2 === 0) {
            _this._widget.toString;
            return;
          }
          t3 = _this._rotationStart;
          t3.toString;
          desiredRotation = t3 + t2;
          t2 = _this._interactive_viewer$_transformationController;
          t2.set$value(0, _this._matrixRotate$3(t2._change_notifier$_value, _this._currentRotation - desiredRotation, t1));
          _this._currentRotation = desiredRotation;
          break;
        case 0:
          if (details.scale !== 1) {
            _this._widget.toString;
            return;
          }
          if (_this._currentAxis == null) {
            t2 = _this._referenceFocalPoint;
            t2.toString;
            _this._currentAxis = A._getPanAxis(t2, focalPointScene);
          }
          t2 = _this._referenceFocalPoint;
          t2.toString;
          translationChange = focalPointScene.$sub(0, t2);
          t2 = _this._interactive_viewer$_transformationController;
          t2.set$value(0, _this._matrixTranslate$2(t2._change_notifier$_value, translationChange));
          _this._referenceFocalPoint = _this._interactive_viewer$_transformationController.toScene$1(t1);
          break;
      }
      _this._widget.toString;
    },
    _onScaleEnd$1(details) {
      var t1, t2, _0_0, t3, frictionSimulationX, frictionSimulationY, tFinal, t4, t5, scale, frictionSimulation, _this = this;
      _this._widget.toString;
      _this._referenceFocalPoint = _this._rotationStart = _this._scaleStart = null;
      t1 = _this._interactive_viewer$_animation;
      if (t1 != null) {
        t2 = type$.void_Function._as(_this.get$_onAnimate());
        t1.parent.removeListener$1(0, t2);
      }
      t1 = _this._scaleAnimation;
      if (t1 != null) {
        t2 = type$.void_Function._as(_this.get$_onScaleAnimate());
        t1.parent.removeListener$1(0, t2);
      }
      t1 = _this.___InteractiveViewerState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.set$value(0, t1.lowerBound);
      t1 = _this.___InteractiveViewerState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t1.set$value(0, t1.lowerBound);
      if (!_this._gestureIsSupported$1(_this._gestureType)) {
        _this._currentAxis = null;
        return;
      }
      $label0$0: {
        _0_0 = _this._gestureType;
        if (D._GestureType_0 === _0_0) {
          t1 = details.velocity.pixelsPerSecond;
          if (t1.get$distance() < 50) {
            _this._currentAxis = null;
            return;
          }
          t2 = _this._interactive_viewer$_transformationController._change_notifier$_value.getTranslation$0()._v3storage;
          t3 = t2[0];
          t2 = t2[1];
          _this._widget.toString;
          frictionSimulationX = B.FrictionSimulation$(0.0000135, t3, t1._dx, 0, C.Tolerance_RoN);
          _this._widget.toString;
          frictionSimulationY = B.FrictionSimulation$(0.0000135, t2, t1._dy, 0, C.Tolerance_RoN);
          t1 = t1.get$distance();
          _this._widget.toString;
          tFinal = A._getFinalTime(t1, 0.0000135, 10);
          t1 = frictionSimulationX.get$finalX();
          t4 = frictionSimulationY.get$finalX();
          t5 = type$.Tween_Offset;
          _this.set$_interactive_viewer$_animation(new B._AnimatedEvaluation(type$.Animation_double._as(B.CurvedAnimation$(C.C__DecelerateCurve, _this.___InteractiveViewerState__controller_A, null)), new B.Tween(new B.Offset(t3, t2), new B.Offset(t1, t4), t5), t5._eval$1("_AnimatedEvaluation<Animatable.T>")));
          _this.___InteractiveViewerState__controller_A.duration = B.Duration$(0, 0, 0, C.JSNumber_methods.round$0(tFinal * 1000), 0, 0);
          t5 = _this._interactive_viewer$_animation;
          t5.toString;
          t5.parent.addListener$1(0, type$.void_Function._as(_this.get$_onAnimate()));
          _this.___InteractiveViewerState__controller_A.forward$0(0);
          break $label0$0;
        }
        if (D._GestureType_1 === _0_0) {
          t1 = details.scaleVelocity;
          t2 = Math.abs(t1);
          if (t2 < 0.1) {
            _this._currentAxis = null;
            return;
          }
          scale = _this._interactive_viewer$_transformationController._change_notifier$_value.getMaxScaleOnAxis$0();
          _this._widget.toString;
          frictionSimulation = B.FrictionSimulation$(0.0026999999999999997, scale, t1 / 10, 0, C.Tolerance_RoN);
          _this._widget.toString;
          tFinal = A._getFinalTime(t2, 0.0000135, 0.1);
          t1 = frictionSimulation.x$1(0, tFinal);
          t2 = type$.Tween_double;
          _this.set$_scaleAnimation(new B._AnimatedEvaluation(type$.Animation_double._as(B.CurvedAnimation$(C.C__DecelerateCurve, _this.___InteractiveViewerState__scaleController_A, null)), new B.Tween(scale, t1, t2), t2._eval$1("_AnimatedEvaluation<Animatable.T>")));
          _this.___InteractiveViewerState__scaleController_A.duration = B.Duration$(0, 0, 0, C.JSNumber_methods.round$0(tFinal * 1000), 0, 0);
          t2 = _this._scaleAnimation;
          t2.toString;
          t2.parent.addListener$1(0, type$.void_Function._as(_this.get$_onScaleAnimate()));
          _this.___InteractiveViewerState__scaleController_A.forward$0(0);
          break $label0$0;
        }
        if (D._GestureType_2 === _0_0 || _0_0 == null)
          break $label0$0;
      }
    },
    _receivedPointerSignal$1($event) {
      var t1, t2, t3, localDelta, focalPointScene, newFocalPointScene, scaleChange, focalPointSceneScaled, _this = this;
      type$.PointerSignalEvent._as($event);
      if (type$.PointerScrollEvent._is($event)) {
        t1 = $event.get$kind($event) === C.PointerDeviceKind_4;
        if (t1)
          _this._widget.toString;
        if (t1) {
          t1 = _this._widget.onInteractionStart;
          t2 = $event.get$position($event);
          t3 = $event.get$localPosition();
          t1.call$1(new B.ScaleStartDetails(t2, t3, 0));
          t1 = $event.get$position($event).$add(0, $event.get$scrollDelta());
          t2 = $event.get$scrollDelta();
          localDelta = B.PointerEvent_transformDeltaViaPositions($event.get$transform($event), null, t2, t1);
          if (!_this._gestureIsSupported$1(D._GestureType_0)) {
            _this._widget.toString;
            return;
          }
          t1 = _this._interactive_viewer$_transformationController;
          t1.toString;
          focalPointScene = t1.toScene$1($event.get$localPosition());
          t1 = _this._interactive_viewer$_transformationController;
          t1.toString;
          newFocalPointScene = t1.toScene$1($event.get$localPosition().$sub(0, localDelta));
          t1 = _this._interactive_viewer$_transformationController;
          t1.set$value(0, _this._matrixTranslate$2(t1._change_notifier$_value, newFocalPointScene.$sub(0, focalPointScene)));
          _this._widget.toString;
          return;
        }
        if ($event.get$scrollDelta()._dy === 0)
          return;
        t1 = $event.get$scrollDelta();
        _this._widget.toString;
        scaleChange = Math.exp(-t1._dy / 200);
      } else if (type$.PointerScaleEvent._is($event))
        scaleChange = $event.get$scale($event);
      else
        return;
      t1 = _this._widget.onInteractionStart;
      t2 = $event.get$position($event);
      t3 = $event.get$localPosition();
      t1.call$1(new B.ScaleStartDetails(t2, t3, 0));
      if (!_this._gestureIsSupported$1(D._GestureType_1)) {
        _this._widget.toString;
        return;
      }
      t1 = _this._interactive_viewer$_transformationController;
      t1.toString;
      focalPointScene = t1.toScene$1($event.get$localPosition());
      t1 = _this._interactive_viewer$_transformationController;
      t1.set$value(0, _this._matrixScale$2(t1._change_notifier$_value, scaleChange));
      t1 = _this._interactive_viewer$_transformationController;
      t1.toString;
      focalPointSceneScaled = t1.toScene$1($event.get$localPosition());
      t1 = _this._interactive_viewer$_transformationController;
      t1.set$value(0, _this._matrixTranslate$2(t1._change_notifier$_value, focalPointSceneScaled.$sub(0, focalPointScene)));
      _this._widget.toString;
    },
    _onAnimate$0() {
      var t2, translationScene, t3, translationChangeScene, _this = this,
        t1 = _this.___InteractiveViewerState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1 = t1._ticker;
      if (!(t1 != null && t1._ticker$_future != null)) {
        _this._currentAxis = null;
        t1 = _this._interactive_viewer$_animation;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onAnimate());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_interactive_viewer$_animation(null);
        t1 = _this.___InteractiveViewerState__controller_A;
        t1.set$value(0, t1.lowerBound);
        return;
      }
      t1 = _this._interactive_viewer$_transformationController._change_notifier$_value.getTranslation$0()._v3storage;
      t2 = t1[0];
      t1 = t1[1];
      translationScene = _this._interactive_viewer$_transformationController.toScene$1(new B.Offset(t2, t1));
      t1 = _this._interactive_viewer$_transformationController;
      t1.toString;
      t2 = _this._interactive_viewer$_animation;
      t3 = t2._evaluatable;
      t2 = type$.Animation_double._as(t2.parent);
      translationChangeScene = t1.toScene$1(t3.transform$1(0, t2.get$value(t2))).$sub(0, translationScene);
      t2 = _this._interactive_viewer$_transformationController;
      t2.set$value(0, _this._matrixTranslate$2(t2._change_notifier$_value, translationChangeScene));
    },
    _onScaleAnimate$0() {
      var t2, desiredScale, t3, referenceFocalPoint, focalPointSceneScaled, _this = this,
        t1 = _this.___InteractiveViewerState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t1 = t1._ticker;
      if (!(t1 != null && t1._ticker$_future != null)) {
        _this._currentAxis = null;
        t1 = _this._scaleAnimation;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onScaleAnimate());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_scaleAnimation(null);
        t1 = _this.___InteractiveViewerState__scaleController_A;
        t1.set$value(0, t1.lowerBound);
        return;
      }
      t1 = _this._scaleAnimation;
      t2 = t1._evaluatable;
      t1 = type$.Animation_double._as(t1.parent);
      desiredScale = t2.transform$1(0, t1.get$value(t1));
      t1 = _this._interactive_viewer$_transformationController._change_notifier$_value.getMaxScaleOnAxis$0();
      t2 = _this._interactive_viewer$_transformationController;
      t2.toString;
      t3 = _this.___InteractiveViewerState__scaleAnimationFocalPoint_A;
      t3 === $ && B.throwLateFieldNI("_scaleAnimationFocalPoint");
      referenceFocalPoint = t2.toScene$1(t3);
      t3 = _this._interactive_viewer$_transformationController;
      t3.set$value(0, _this._matrixScale$2(t3._change_notifier$_value, desiredScale / t1));
      focalPointSceneScaled = _this._interactive_viewer$_transformationController.toScene$1(_this.___InteractiveViewerState__scaleAnimationFocalPoint_A);
      t1 = _this._interactive_viewer$_transformationController;
      t1.set$value(0, _this._matrixTranslate$2(t1._change_notifier$_value, focalPointSceneScaled.$sub(0, referenceFocalPoint)));
    },
    _onTransformationControllerChange$0() {
      this.setState$1(new A._InteractiveViewerState__onTransformationControllerChange_closure());
    },
    initState$0() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget.transformationController;
      _this._interactive_viewer$_transformationController = t1;
      t1.addListener$1(0, _this.get$_onTransformationControllerChange());
      _this.___InteractiveViewerState__controller_A = B.AnimationController$(C.AnimationBehavior_0, _null, _null, _null, 1, _null, _this);
      _this.___InteractiveViewerState__scaleController_A = B.AnimationController$(C.AnimationBehavior_0, _null, _null, _null, 1, _null, _this);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      type$.InteractiveViewer._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      if (t1.transformationController !== oldWidget.transformationController) {
        t1 = _this.get$_onTransformationControllerChange();
        _this._interactive_viewer$_transformationController.removeListener$1(0, t1);
        t2 = _this._widget.transformationController;
        _this._interactive_viewer$_transformationController = t2;
        t2.addListener$1(0, t1);
      }
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___InteractiveViewerState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      t1 = _this.___InteractiveViewerState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t1.dispose$0();
      _this._interactive_viewer$_transformationController.removeListener$1(0, _this.get$_onTransformationControllerChange());
      _this._widget.toString;
      _this.super$__InteractiveViewerState_State_TickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var t2, child, _this = this, _null = null,
        t1 = _this._widget;
      t1.toString;
      t2 = _this._interactive_viewer$_transformationController._change_notifier$_value;
      child = new A._InteractiveViewerBuilt(t1.child, _this._childKey, C.Clip_1, true, t2, _null, _null);
      return B.Listener$(C.HitTestBehavior_0, B.GestureDetector$(C.HitTestBehavior_1, child, C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _this.get$_onScaleEnd(), _this.get$_interactive_viewer$_onScaleStart(), _this.get$_onScaleUpdate(), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, false, new B.Offset(0, -0.005)), _this._parentKey, _null, _null, _null, _this.get$_receivedPointerSignal(), _null);
    },
    set$_interactive_viewer$_animation(_animation) {
      this._interactive_viewer$_animation = type$.nullable_Animation_Offset._as(_animation);
    },
    set$_scaleAnimation(_scaleAnimation) {
      this._scaleAnimation = type$.nullable_Animation_double._as(_scaleAnimation);
    },
    $isTickerProvider: 1
  };
  A._InteractiveViewerBuilt.prototype = {
    build$1(context) {
      var _this = this,
        child = B.Transform$(_this.alignment, new B.KeyedSubtree(_this.child, _this.childKey), null, _this.matrix, true);
      return B.ClipRect$(child, _this.clipBehavior, null);
    }
  };
  A.TransformationController.prototype = {
    toScene$1(viewportPoint) {
      var t1 = this._change_notifier$_value,
        r = new B.Matrix40(new Float64Array(16));
      if (r.copyInverse$1(t1) === 0)
        B.throwExpression(B.ArgumentError$value(t1, "other", "Matrix cannot be inverted"));
      t1 = new B.Vector3(new Float64Array(3));
      t1.setValues$3(viewportPoint._dx, viewportPoint._dy, 0);
      t1 = r.transform3$1(t1)._v3storage;
      return new B.Offset(t1[0], t1[1]);
    }
  };
  A._GestureType.prototype = {
    _enumToString$0() {
      return "_GestureType." + this._core$_name;
    }
  };
  A.PanAxis.prototype = {
    _enumToString$0() {
      return "PanAxis." + this._core$_name;
    }
  };
  A.__InteractiveViewerState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.TransformationsDemo.prototype = {
    createState$0() {
      var _null = null;
      return new A._TransformationsDemoState(new B.LabeledGlobalKey(_null, type$.LabeledGlobalKey_State_StatefulWidget), A.Board$(_null, 8, 1, 16, _null), A.TransformationController$(), _null, _null, C._StateLifecycle_0);
    }
  };
  A._TransformationsDemoState.prototype = {
    _onAnimateReset$0() {
      var _this = this,
        t1 = _this._animationReset,
        t2 = t1._evaluatable;
      t1 = type$.Animation_double._as(t1.parent);
      _this._transformationController.set$value(0, t2.transform$1(0, t1.get$value(t1)));
      t1 = _this.___TransformationsDemoState__controllerReset_A;
      t1 === $ && B.throwLateFieldNI("_controllerReset");
      t1 = t1._ticker;
      if (!(t1 != null && t1._ticker$_future != null)) {
        t1 = _this._animationReset;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onAnimateReset());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_animationReset(null);
        t1 = _this.___TransformationsDemoState__controllerReset_A;
        t1.set$value(0, t1.lowerBound);
      }
    },
    _onScaleStart$1(details) {
      var t2, _this = this,
        t1 = _this.___TransformationsDemoState__controllerReset_A;
      t1 === $ && B.throwLateFieldNI("_controllerReset");
      t2 = t1.__AnimationController__status_A;
      t2 === $ && B.throwLateFieldNI("_status");
      if (t2 === C.AnimationStatus_1) {
        t1.stop$0(0);
        t1 = _this._animationReset;
        if (t1 != null) {
          t2 = type$.void_Function._as(_this.get$_onAnimateReset());
          t1.parent.removeListener$1(0, t2);
        }
        _this.set$_animationReset(null);
        t1 = _this.___TransformationsDemoState__controllerReset_A;
        t1.set$value(0, t1.lowerBound);
      }
    },
    _onTapUp$1(details) {
      var _this = this,
        scenePoint = _this._transformationController.toScene$1(details.globalPosition.$sub(0, B.MatrixUtils_transformPoint(type$.RenderBox._as($.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._targetKey).get$renderObject()).getTransformTo$1(0, null), C.Offset_0_0)));
      _this.setState$1(new A._TransformationsDemoState__onTapUp_closure(_this, _this._board.pointToBoardPoint$1(scenePoint)));
    },
    initState$0() {
      var _null = null;
      this.super$State$initState();
      this.___TransformationsDemoState__controllerReset_A = B.AnimationController$(C.AnimationBehavior_0, _null, _null, _null, 1, _null, this);
    },
    build$1(context) {
      var _null = null,
        t1 = B.Theme_of(context);
      return B.Scaffold$(B.AppBar$(_null, _null, false, _null, _null, 1, _null, _null, _null, false, _null, false, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, B.Text$(B.Localizations_of(context, C.Type_GalleryLocalizations_M5r, type$.GalleryLocalizations).get$demo2dTransformationsTitle(), _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null, 1, _null), t1.colorScheme.primary, B.Container$(_null, new B.LayoutBuilder(new A._TransformationsDemoState_build_closure(this), _null), C.Clip_0, D.Color_4280756007, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, false, _null, _null, _null, B._setArrayType([this.get$resetButton(), this.get$editButton()], type$.JSArray_Widget), _null);
    },
    get$resetButton() {
      var _null = null,
        t1 = this._framework$_element;
      t1.toString;
      return B.IconButton$(B.Theme_of(t1).colorScheme.surface, _null, _null, D.Icon_8kr, _null, _null, new A._TransformationsDemoState_resetButton_closure(this), _null, _null, _null, "Reset");
    },
    get$editButton() {
      var _null = null,
        t1 = this._framework$_element;
      t1.toString;
      return B.IconButton$(B.Theme_of(t1).colorScheme.surface, _null, _null, D.Icon_qnz, _null, _null, new A._TransformationsDemoState_editButton_closure(this), _null, _null, _null, "Edit");
    },
    dispose$0() {
      var t1 = this.___TransformationsDemoState__controllerReset_A;
      t1 === $ && B.throwLateFieldNI("_controllerReset");
      t1.dispose$0();
      this.super$__TransformationsDemoState_State_TickerProviderStateMixin$dispose();
    },
    set$_animationReset(_animationReset) {
      this._animationReset = type$.nullable_Animation_Matrix4._as(_animationReset);
    },
    $isTickerProvider: 1
  };
  A._BoardPainter.prototype = {
    paint$2(canvas, size) {
      this.board.forEach$1(0, new A._BoardPainter_paint_drawBoardPoint(this, canvas));
    },
    shouldRepaint$1(oldDelegate) {
      return type$._BoardPainter._as(oldDelegate).board !== this.board;
    }
  };
  A.__TransformationsDemoState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.Board.prototype = {
    Board$5$boardPoints$boardRadius$hexagonMargin$hexagonRadius$selected(boardPoints, boardRadius, hexagonMargin, hexagonRadius, selected) {
      var t3, t4, t5, t6, boardPoint, _this = this,
        t1 = _this.hexagonRadius,
        t2 = -t1,
        hexagonRadiusPadded = t1 - _this.hexagonMargin,
        centerToFlat = Math.sqrt(3) / 2 * hexagonRadiusPadded;
      t1 = 0 + centerToFlat;
      t3 = t2 + 0.5 * hexagonRadiusPadded;
      t4 = t2 + 1.5 * hexagonRadiusPadded;
      t5 = t2 + 2 * hexagonRadiusPadded;
      t6 = 0 - centerToFlat;
      C.JSArray_methods.addAll$1(_this.positionsForHexagonAtOrigin, B._setArrayType([new B.Offset(0, t2), new B.Offset(t1, t3), new B.Offset(t1, t4), new B.Offset(t1, t4), new B.Offset(0, t5), new B.Offset(0, t5), new B.Offset(t6, t4), new B.Offset(t6, t4), new B.Offset(t6, t3)], type$.JSArray_Offset));
      if (boardPoints != null)
        C.JSArray_methods.addAll$1(_this._boardPoints, boardPoints);
      else {
        boardPoint = _this._getNextBoardPoint$1(null);
        for (t1 = _this._boardPoints; boardPoint != null;) {
          C.JSArray_methods.add$1(t1, boardPoint);
          boardPoint = _this._getNextBoardPoint$1(boardPoint);
        }
      }
    },
    get$iterator(_) {
      return new A._BoardIterator(this._boardPoints);
    },
    _getRRangeForQ$1(q) {
      var rEnd = this.boardRadius,
        rStart = -rEnd;
      if (q <= 0)
        rStart -= q;
      else
        rEnd -= q;
      return new A._Range(rStart, rEnd);
    },
    _getNextBoardPoint$1(boardPoint) {
      var t1, rRange, t2, _this = this;
      if (boardPoint == null)
        return new A.BoardPoint(-_this.boardRadius, 0, D.Color_4291677645);
      t1 = boardPoint.q;
      rRange = _this._getRRangeForQ$1(t1);
      if (t1 >= _this.boardRadius && boardPoint.r >= rRange.max)
        return null;
      t2 = boardPoint.r;
      if (t2 >= rRange.max) {
        ++t1;
        return new A.BoardPoint(t1, _this._getRRangeForQ$1(t1).min, D.Color_4291677645);
      }
      return new A.BoardPoint(t1, t2 + 1, D.Color_4291677645);
    },
    get$size(_) {
      var t1 = this.hexagonRadius,
        t2 = this.boardRadius;
      return new B.Size((t2 * 2 + 1) * (Math.sqrt(3) / 2 * t1) * 2, 2 * (t1 + t2 * 1.5 * t1));
    },
    pointToBoardPoint$1(point) {
      var _this = this,
        t1 = _this.get$size(0),
        t2 = point._dy - _this.get$size(0)._dy / 2,
        t3 = _this.hexagonRadius,
        boardPoint = new A.BoardPoint(C.JSNumber_methods.round$0((Math.sqrt(3) / 3 * (point._dx - t1._dx / 2) - 0.3333333333333333 * t2) / t3), C.JSNumber_methods.round$0(0.6666666666666666 * t2 / t3), D.Color_4291677645);
      t1 = D.BoardPoint_0_0_Color_4291677645.get$cubeCoordinates()._v3storage;
      t2 = boardPoint.get$cubeCoordinates()._v3storage;
      if (C.JSNumber_methods._tdivFast$1(Math.abs(t1[0] - t2[0]) + Math.abs(t1[1] - t2[1]) + Math.abs(t1[2] - t2[2]), 2) > _this.boardRadius)
        return null;
      return C.JSArray_methods.firstWhere$1(_this._boardPoints, new A.Board_pointToBoardPoint_closure(boardPoint));
    },
    getVerticesForBoardPoint$2(boardPoint, color) {
      var t1, t2, t3, t4, t5, positions, _this = this;
      type$.BoardPoint._as(boardPoint);
      t1 = _this.hexagonRadius;
      t2 = boardPoint.r;
      t3 = _this.positionsForHexagonAtOrigin;
      t4 = B._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,Offset>");
      positions = B.List_List$of(new B.MappedListIterable(t3, t4._eval$1("Offset(1)")._as(new A.Board_getVerticesForBoardPoint_closure(new B.Point(Math.sqrt(3) * t1 * boardPoint.q + Math.sqrt(3) / 2 * t1 * t2 + _this.get$size(0)._dx / 2, 1.5 * t1 * t2 + _this.get$size(0)._dy / 2, type$.Point_double))), t5), true, t5._eval$1("ListIterable.E"));
      t5 = B.List_List$filled(positions.length, color, false, type$.Color);
      return $.$get$_renderer().createVertices$5$colors$indices$textureCoordinates(C.VertexMode_2, positions, t5, null, null);
    },
    copyWithSelected$1(boardPoint) {
      var _this = this;
      if (J.$eq$(_this.selected, boardPoint))
        return _this;
      return A.Board$(_this._boardPoints, _this.boardRadius, _this.hexagonMargin, _this.hexagonRadius, boardPoint);
    },
    copyWithBoardPointColor$2(boardPoint, color) {
      var nextBoardPoints, selectedBoardPoint, _this = this,
        nextBoardPoint = new A.BoardPoint(boardPoint.q, boardPoint.r, color),
        t1 = _this._boardPoints,
        boardPointIndex = C.JSArray_methods.indexWhere$1(t1, new A.Board_copyWithBoardPointColor_closure(boardPoint));
      if (J.$eq$(_this.elementAt$1(0, boardPointIndex), boardPoint) && boardPoint.color.$eq(0, color))
        return _this;
      nextBoardPoints = B.List_List$from(t1, true, type$.BoardPoint);
      C.JSArray_methods.$indexSet(nextBoardPoints, boardPointIndex, nextBoardPoint);
      selectedBoardPoint = _this.selected;
      if (boardPoint.$eq(0, selectedBoardPoint))
        selectedBoardPoint = nextBoardPoint;
      return A.Board$(nextBoardPoints, _this.boardRadius, _this.hexagonMargin, _this.hexagonRadius, selectedBoardPoint);
    }
  };
  A._BoardIterator.prototype = {
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.currentIndex;
      t1 = t1 == null ? _this.currentIndex = 0 : _this.currentIndex = t1 + 1;
      t2 = _this.boardPoints;
      if (t1 >= t2.length) {
        _this.current = null;
        return false;
      }
      _this.set$current(0, t2[t1]);
      return true;
    },
    set$current(_, current) {
      this.current = type$.nullable_BoardPoint._as(current);
    },
    $isIterator: 1,
    get$current(receiver) {
      return this.current;
    }
  };
  A._Range.prototype = {};
  A.BoardPoint.prototype = {
    toString$0(_) {
      return "BoardPoint(" + this.q + ", " + this.r + ", " + this.color.toString$0(0) + ")";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(this))
        return false;
      return other instanceof A.BoardPoint && other.q === this.q && other.r === this.r;
    },
    get$hashCode(_) {
      return B.Object_hash(this.q, this.r, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    get$cubeCoordinates() {
      var t1 = this.q,
        t2 = this.r,
        t3 = new B.Vector3(new Float64Array(3));
      t3.setValues$3(t1, t2, -t1 - t2);
      return t3;
    }
  };
  A._Board_Object_IterableMixin.prototype = {};
  A.ColorPicker.prototype = {
    build$1(context) {
      var t1 = this.colors,
        t2 = B._instanceType(t1),
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,_ColorPickerSwatch>");
      return B.Row$(B.List_List$of(new B.EfficientLengthMappedIterable(t1, t2._eval$1("_ColorPickerSwatch(1)")._as(new A.ColorPicker_build_closure(this)), t3), true, t3._eval$1("Iterable.E")), C.CrossAxisAlignment_2, null, C.MainAxisAlignment_2, C.MainAxisSize_1, null);
    }
  };
  A._ColorPickerSwatch.prototype = {
    build$1(context) {
      var _null = null,
        t1 = !this.selected ? _null : D.Icon_Fcu;
      return B.Container$(_null, B.RawMaterialButton$(false, t1, C.Clip_0, C.BoxConstraints_86y0, 0, 2, true, this.color, _null, 4, _null, 8, _null, 4, _null, _null, new A._ColorPickerSwatch_build_closure(this), C.RoundedRectangleBorder_NYu4, _null, _null), C.Clip_0, _null, _null, _null, _null, 60, _null, D.EdgeInsets_2_0_2_0, _null, _null, 60);
    }
  };
  A.EditBoardPoint.prototype = {
    build$1(context) {
      var _null = null,
        boardPointColors = B.LinkedHashSet_LinkedHashSet$_literal([C.Color_4294967295, C.Color_4294935427, C.Color_4280082121, C.Color_4283244412, D.Color_4280756007], type$.Color),
        t1 = this.boardPoint;
      return B.Column$(B._setArrayType([B.Text$("" + t1.q + ", " + t1.r, _null, _null, _null, _null, C.TextStyle_cwZ, C.TextAlign_1, _null, _null), new A.ColorPicker(boardPointColors, t1.color, this.onColorSelection, _null)], type$.JSArray_Widget), C.CrossAxisAlignment_3, _null, C.MainAxisAlignment_0, C.MainAxisSize_1, C.VerticalDirection_1);
    }
  };
  A.Quad.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["~()", "~(ScaleStartDetails)", "bool(BoardPoint)", "~(ScaleUpdateDetails)", "~(ScaleEndDetails)", "~(PointerSignalEvent)", "~(TapUpDetails)", "~(BoardPoint?)", "_ColorPickerSwatch(Color)"]);
  A._InteractiveViewerState__onTransformationControllerChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._TransformationsDemoState__onTapUp_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._board = t1._board.copyWithSelected$1(this.boardPoint);
    },
    $signature: 0
  };
  A._TransformationsDemoState_build_closure.prototype = {
    call$2(context, constraints) {
      var t1, t2, t3, t4, _null = null;
      type$.BoxConstraints._as(constraints);
      t1 = constraints.maxWidth;
      t2 = constraints.maxHeight;
      t3 = this.$this;
      if (t3._homeMatrix == null) {
        t4 = new B.Matrix40(new Float64Array(16));
        t4.setIdentity$0();
        t4.translate$2(0, t1 / 2 - t3._board.get$size(0)._dx / 2, t2 / 2 - t3._board.get$size(0)._dy / 2);
        t3._homeMatrix = t4;
        t3._transformationController.set$value(0, t4);
      }
      t4 = t3._board.get$size(0);
      return B.ClipRect$(B.MouseRegion$(B.GestureDetector$(C.HitTestBehavior_1, new A.InteractiveViewer(new B.EdgeInsets(t1, t2, t1, t2), B.SizedBox$expand(B.CustomPaint$(_null, _null, _null, new A._BoardPainter(t3._board, _null), t4), _null), 0.01, t3.get$_onScaleStart(), t3._transformationController, t3._targetKey), C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, t3.get$_onTapUp(), _null, _null, _null, false, C.Offset_7BT), C.SystemMouseCursor_click, _null, _null, _null, _null), C.Clip_1, _null);
    },
    $signature: 908
  };
  A._TransformationsDemoState_resetButton_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.setState$1(new A._TransformationsDemoState_resetButton__closure(t1));
    },
    $signature: 0
  };
  A._TransformationsDemoState_resetButton__closure.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = t1.___TransformationsDemoState__controllerReset_A;
      t2 === $ && B.throwLateFieldNI("_controllerReset");
      t2.set$value(0, t2.lowerBound);
      t2 = t1._transformationController._change_notifier$_value;
      t3 = t1._homeMatrix;
      t1.set$_animationReset(new B._AnimatedEvaluation(type$.Animation_double._as(t1.___TransformationsDemoState__controllerReset_A), new B.Matrix4Tween(t2, t3), type$.Matrix4Tween._eval$1("_AnimatedEvaluation<Animatable.T>")));
      t1.___TransformationsDemoState__controllerReset_A.duration = C.Duration_400000;
      t3 = t1._animationReset;
      t3.toString;
      t3.parent.addListener$1(0, type$.void_Function._as(t1.get$_onAnimateReset()));
      t1.___TransformationsDemoState__controllerReset_A.forward$0(0);
    },
    $signature: 0
  };
  A._TransformationsDemoState_editButton_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (t1._board.selected == null)
        return;
      t2 = t1._framework$_element;
      t2.toString;
      E.showModalBottomSheet(new A._TransformationsDemoState_editButton__closure(t1), t2, type$.Widget);
    },
    $signature: 0
  };
  A._TransformationsDemoState_editButton__closure.prototype = {
    call$1(context) {
      var t1, t2, _null = null;
      type$.BuildContext._as(context);
      t1 = this.$this;
      t2 = t1._board.selected;
      t2.toString;
      return B.Container$(_null, new A.EditBoardPoint(t2, new A._TransformationsDemoState_editButton___closure(t1, context), _null), C.Clip_0, _null, _null, _null, _null, 150, _null, C.EdgeInsets_12_12_12_12, _null, _null, 1 / 0);
    },
    $signature: 909
  };
  A._TransformationsDemoState_editButton___closure.prototype = {
    call$1(color) {
      var t1 = this.$this;
      t1.setState$1(new A._TransformationsDemoState_editButton____closure(t1, color, this.context));
    },
    $signature: 910
  };
  A._TransformationsDemoState_editButton____closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._board,
        t3 = t2.selected;
      t3.toString;
      t1._board = t2.copyWithBoardPointColor$2(t3, this.color);
      B.Navigator_of(this.context, false).pop$1$1(null, type$.nullable_Object);
    },
    $signature: 0
  };
  A._BoardPainter_paint_drawBoardPoint.prototype = {
    call$1(boardPoint) {
      var t1, t2;
      type$.nullable_BoardPoint._as(boardPoint);
      t1 = boardPoint.color;
      t2 = this.$this.board;
      this.canvas.drawVertices$3(t2.getVerticesForBoardPoint$2(boardPoint, B.Color$fromARGB(C.JSNumber_methods.round$0(255 * (J.$eq$(t2.selected, boardPoint) ? 0.7 : 1)), t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255)), C.BlendMode_27, $.$get$_renderer().createPaint$0());
    },
    $signature: typesOffset + 7
  };
  A.Board_pointToBoardPoint_closure.prototype = {
    call$1(boardPointI) {
      var t1;
      type$.BoardPoint._as(boardPointI);
      t1 = this.boardPoint;
      return boardPointI.q === t1.q && boardPointI.r === t1.r;
    },
    $signature: typesOffset + 2
  };
  A.Board_getVerticesForBoardPoint_closure.prototype = {
    call$1(offset) {
      var t1;
      type$.Offset._as(offset);
      t1 = this.centerOfHexZeroCenter;
      return new B.Offset(offset._dx + t1.x, offset._dy + t1.y);
    },
    $signature: 302
  };
  A.Board_copyWithBoardPointColor_closure.prototype = {
    call$1(boardPointI) {
      var t1;
      type$.BoardPoint._as(boardPointI);
      t1 = this.boardPoint;
      return boardPointI.q === t1.q && boardPointI.r === t1.r;
    },
    $signature: typesOffset + 2
  };
  A.ColorPicker_build_closure.prototype = {
    call$1(color) {
      var t1;
      type$.Color._as(color);
      t1 = this.$this;
      return new A._ColorPickerSwatch(color, color.$eq(0, t1.selectedColor), new A.ColorPicker_build__closure(t1, color), null);
    },
    $signature: typesOffset + 8
  };
  A.ColorPicker_build__closure.prototype = {
    call$0() {
      this.$this.onColorSelection.call$1(this.color);
    },
    $signature: 34
  };
  A._ColorPickerSwatch_build_closure.prototype = {
    call$0() {
      this.$this.onTap.call$0();
    },
    $signature: 0
  };
  (function aliases() {
    var _ = A.__InteractiveViewerState_State_TickerProviderStateMixin.prototype;
    _.super$__InteractiveViewerState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__TransformationsDemoState_State_TickerProviderStateMixin.prototype;
    _.super$__TransformationsDemoState_State_TickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u;
    var _;
    _instance_1_u(_ = A._InteractiveViewerState.prototype, "get$_interactive_viewer$_onScaleStart", "_interactive_viewer$_onScaleStart$1", 1);
    _instance_1_u(_, "get$_onScaleUpdate", "_onScaleUpdate$1", 3);
    _instance_1_u(_, "get$_onScaleEnd", "_onScaleEnd$1", 4);
    _instance_1_u(_, "get$_receivedPointerSignal", "_receivedPointerSignal$1", 5);
    _instance_0_u(_, "get$_onAnimate", "_onAnimate$0", 0);
    _instance_0_u(_, "get$_onScaleAnimate", "_onScaleAnimate$0", 0);
    _instance_0_u(_, "get$_onTransformationControllerChange", "_onTransformationControllerChange$0", 0);
    _instance_0_u(_ = A._TransformationsDemoState.prototype, "get$_onAnimateReset", "_onAnimateReset$0", 0);
    _instance_1_u(_, "get$_onScaleStart", "_onScaleStart$1", 1);
    _instance_1_u(_, "get$_onTapUp", "_onTapUp$1", 6);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.StatefulWidget, [A.InteractiveViewer, A.TransformationsDemo]);
    _inheritMany(B.State, [A.__InteractiveViewerState_State_TickerProviderStateMixin, A.__TransformationsDemoState_State_TickerProviderStateMixin]);
    _inherit(A._InteractiveViewerState, A.__InteractiveViewerState_State_TickerProviderStateMixin);
    _inheritMany(B.Closure0Args, [A._InteractiveViewerState__onTransformationControllerChange_closure, A._TransformationsDemoState__onTapUp_closure, A._TransformationsDemoState_resetButton_closure, A._TransformationsDemoState_resetButton__closure, A._TransformationsDemoState_editButton_closure, A._TransformationsDemoState_editButton____closure, A.ColorPicker_build__closure, A._ColorPickerSwatch_build_closure]);
    _inheritMany(B.StatelessWidget, [A._InteractiveViewerBuilt, A.ColorPicker, A._ColorPickerSwatch, A.EditBoardPoint]);
    _inherit(A.TransformationController, B.ValueNotifier);
    _inheritMany(B._Enum, [A._GestureType, A.PanAxis]);
    _inherit(A._TransformationsDemoState, A.__TransformationsDemoState_State_TickerProviderStateMixin);
    _inherit(A._TransformationsDemoState_build_closure, B.Closure2Args);
    _inheritMany(B.Closure, [A._TransformationsDemoState_editButton__closure, A._TransformationsDemoState_editButton___closure, A._BoardPainter_paint_drawBoardPoint, A.Board_pointToBoardPoint_closure, A.Board_getVerticesForBoardPoint_closure, A.Board_copyWithBoardPointColor_closure, A.ColorPicker_build_closure]);
    _inherit(A._BoardPainter, B.CustomPainter);
    _inheritMany(B.Object, [A._Board_Object_IterableMixin, A._BoardIterator, A._Range, A.BoardPoint, A.Quad]);
    _inherit(A.Board, A._Board_Object_IterableMixin);
    _mixinHard(A.__InteractiveViewerState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__TransformationsDemoState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixin(A._Board_Object_IterableMixin, B.Iterable);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"InteractiveViewer":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InteractiveViewerState":{"TickerProviderStateMixin":["InteractiveViewer"],"State":["InteractiveViewer"],"TickerProvider":[],"State.T":"InteractiveViewer"},"_InteractiveViewerBuilt":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"TransformationController":{"ValueNotifier":["Matrix40"],"ChangeNotifier":[],"ValueListenable":["Matrix40"],"Listenable":[],"ValueNotifier.T":"Matrix40"},"_GestureType":{"Enum":[]},"PanAxis":{"Enum":[]},"TransformationsDemo":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TransformationsDemoState":{"TickerProviderStateMixin":["TransformationsDemo"],"State":["TransformationsDemo"],"TickerProvider":[],"State.T":"TransformationsDemo"},"_BoardPainter":{"CustomPainter":[],"Listenable":[]},"Board":{"Iterable":["BoardPoint?"],"Iterable.E":"BoardPoint?"},"_BoardIterator":{"Iterator":["BoardPoint?"]},"_ColorPickerSwatch":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"ColorPicker":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"EditBoardPoint":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Animation_double: findType("Animation<double>"),
      BoardPoint: findType("BoardPoint"),
      BoxConstraints: findType("BoxConstraints"),
      BuildContext: findType("BuildContext"),
      Color: findType("Color"),
      GalleryLocalizations: findType("GalleryLocalizations"),
      InteractiveViewer: findType("InteractiveViewer"),
      JSArray_BoardPoint: findType("JSArray<BoardPoint>"),
      JSArray_Offset: findType("JSArray<Offset>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      Matrix4Tween: findType("Matrix4Tween"),
      Offset: findType("Offset"),
      Point_double: findType("Point<double>"),
      PointerScaleEvent: findType("PointerScaleEvent"),
      PointerScrollEvent: findType("PointerScrollEvent"),
      PointerSignalEvent: findType("PointerSignalEvent"),
      RenderBox: findType("RenderBox"),
      Tween_Offset: findType("Tween<Offset>"),
      Tween_double: findType("Tween<double>"),
      Widget: findType("Widget"),
      _BoardPainter: findType("_BoardPainter"),
      nullable_Animation_Matrix4: findType("Animation<Matrix40>?"),
      nullable_Animation_Offset: findType("Animation<Offset>?"),
      nullable_Animation_double: findType("Animation<double>?"),
      nullable_BoardPoint: findType("BoardPoint?"),
      nullable_Object: findType("Object?"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    D.Color_4291677645 = new B.Color(4291677645);
    D.BoardPoint_0_0_Color_4291677645 = new A.BoardPoint(0, 0, D.Color_4291677645);
    D.Color_4280756007 = new B.Color(4280756007);
    D.EdgeInsets_2_0_2_0 = new B.EdgeInsets(2, 0, 2, 0);
    D.IconData_58659_MaterialIcons_null_false = new B.IconData(58659, "MaterialIcons", null, false);
    D.Icon_8kr = new B.Icon(D.IconData_58659_MaterialIcons_null_false, null, null, null, null);
    D.IconData_57686_MaterialIcons_null_false = new B.IconData(57686, "MaterialIcons", null, false);
    D.Icon_Fcu = new B.Icon(D.IconData_57686_MaterialIcons_null_false, null, C.Color_4294967295, null, null);
    D.Icon_qnz = new B.Icon(F.IconData_57882_MaterialIcons_null_false, null, null, null, null);
    D.PanAxis_3 = new A.PanAxis(3, "free");
    D._GestureType_0 = new A._GestureType(0, "pan");
    D._GestureType_1 = new A._GestureType(1, "scale");
    D._GestureType_2 = new A._GestureType(2, "rotate");
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_592", e: "endPart", h: h});
})($__dart_deferred_initializers__, "HxDoS1lWsfFddN6RkNmnb9uGIU8=");
;