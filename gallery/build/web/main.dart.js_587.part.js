// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.0-167.0.dev.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_587", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A, B,
  C = {
    ToggleButtons$(borderRadius, children, isSelected, onPressed, selectedBorderColor) {
      return new C.ToggleButtons(children, isSelected, onPressed, selectedBorderColor, borderRadius, null);
    },
    _SelectToggleButtonRenderObject__maxHeight(box, width) {
      var t1;
      if (box == null)
        t1 = null;
      else {
        t1 = type$.double;
        t1 = box._computeIntrinsics$2$3(B._IntrinsicDimension_3, width, box.get$computeMaxIntrinsicHeight(), t1, t1);
      }
      return t1 == null ? 0 : t1;
    },
    _SelectToggleButtonRenderObject__minWidth(box, height) {
      var t1;
      if (box == null)
        t1 = null;
      else {
        t1 = type$.double;
        t1 = box._computeIntrinsics$2$3(B._IntrinsicDimension_0, height, box.get$computeMinIntrinsicWidth(), t1, t1);
      }
      return t1 == null ? 0 : t1;
    },
    _SelectToggleButtonRenderObject__maxWidth(box, height) {
      var t1;
      if (box == null)
        t1 = null;
      else {
        t1 = type$.double;
        t1 = box._computeIntrinsics$2$3(B._IntrinsicDimension_1, height, box.get$computeMaxIntrinsicWidth(), t1, t1);
      }
      return t1 == null ? 0 : t1;
    },
    ToggleButtons: function ToggleButtons(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.children = t0;
      _.isSelected = t1;
      _.onPressed = t2;
      _.selectedBorderColor = t3;
      _.borderRadius = t4;
      _.key = t5;
    },
    ToggleButtons_build_closure: function ToggleButtons_build_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.textDirection = t1;
      _.toggleButtonsTheme = t2;
      _.theme = t3;
    },
    ToggleButtons_build__closure: function ToggleButtons_build__closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    _ResolveFillColor: function _ResolveFillColor(t0) {
      this.primary = t0;
    },
    _DefaultFillColor: function _DefaultFillColor(t0) {
      this.colorScheme = t0;
    },
    _ToggleButtonDefaultOverlay: function _ToggleButtonDefaultOverlay(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.selected = t0;
      _.unselected = t1;
      _.colorScheme = t2;
      _.focusColor = t3;
      _.highlightColor = t4;
      _.hoverColor = t5;
      _.splashColor = t6;
    },
    _SelectToggleButton: function _SelectToggleButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.leadingBorderSide = t0;
      _.borderSide = t1;
      _.trailingBorderSide = t2;
      _.borderRadius = t3;
      _.isFirstButton = t4;
      _.isLastButton = t5;
      _.direction = t6;
      _.verticalDirection = t7;
      _.child = t8;
      _.key = t9;
    },
    _SelectToggleButtonRenderObject: function _SelectToggleButtonRenderObject(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _._toggle_buttons$_direction = t0;
      _._toggle_buttons$_verticalDirection = t1;
      _._leadingBorderSide = t2;
      _._borderSide = t3;
      _._trailingBorderSide = t4;
      _._toggle_buttons$_borderRadius = t5;
      _._isFirstButton = t6;
      _._isLastButton = t7;
      _._toggle_buttons$_textDirection = t8;
      _.RenderObjectWithChildMixin__child = t9;
      _._layoutCacheStorage = t10;
      _._computingThisDryBaseline = _._computingThisDryLayout = false;
      _._box$_size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.parentData = null;
      _._depth = 0;
      _.debugCreator = _._object$_parent = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._object$_owner = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t11;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _InputPadding: function _InputPadding(t0, t1, t2, t3) {
      var _ = this;
      _.minSize = t0;
      _.direction = t1;
      _.child = t2;
      _.key = t3;
    },
    _RenderInputPadding: function _RenderInputPadding(t0, t1, t2, t3, t4) {
      var _ = this;
      _._minSize = t0;
      _._toggle_buttons$_direction = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._layoutCacheStorage = t3;
      _._computingThisDryBaseline = _._computingThisDryLayout = false;
      _._box$_size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.parentData = null;
      _._depth = 0;
      _.debugCreator = _._object$_parent = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._object$_owner = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderInputPadding_hitTest_closure: function _RenderInputPadding_hitTest_closure(t0, t1) {
      this.$this = t0;
      this.center = t1;
    },
    __DefaultFillColor_MaterialStateProperty_Diagnosticable: function __DefaultFillColor_MaterialStateProperty_Diagnosticable() {
    },
    __ResolveFillColor_MaterialStateProperty_Diagnosticable: function __ResolveFillColor_MaterialStateProperty_Diagnosticable() {
    }
  },
  D;
  A = holdersList[0];
  B = holdersList[2];
  C = hunkHelpers.updateHolder(holdersList[93], C);
  D = holdersList[139];
  C.ToggleButtons.prototype = {
    _isFirstButton$3(index, $length, textDirection) {
      var t1;
      switch (0) {
        case 0:
          switch (textDirection.index) {
            case 0:
              t1 = index === $length - 1;
              break;
            case 1:
              t1 = index === 0;
              break;
            default:
              t1 = null;
          }
          return t1;
      }
    },
    _isLastButton$3(index, $length, textDirection) {
      var t1;
      switch (0) {
        case 0:
          switch (textDirection.index) {
            case 0:
              t1 = index === 0;
              break;
            case 1:
              t1 = index === $length - 1;
              break;
            default:
              t1 = null;
          }
          return t1;
      }
    },
    _getEdgeBorderRadius$4(index, $length, textDirection, toggleButtonsTheme) {
      var t1 = this.borderRadius,
        resultingBorderRadius = t1 == null ? toggleButtonsTheme.borderRadius : t1;
      if (resultingBorderRadius == null)
        resultingBorderRadius = B.BorderRadius_ww84;
      if ($length === 1)
        return resultingBorderRadius;
      else if (this._isFirstButton$3(index, $length, textDirection))
        return new A.BorderRadius(resultingBorderRadius.topLeft, B.Radius_0_0, resultingBorderRadius.bottomLeft, B.Radius_0_0);
      else if (this._isLastButton$3(index, $length, textDirection))
        return new A.BorderRadius(B.Radius_0_0, resultingBorderRadius.topRight, B.Radius_0_0, resultingBorderRadius.bottomRight);
      return B.BorderRadius_ww84;
    },
    _getClipBorderRadius$4(index, $length, textDirection, toggleButtonsTheme) {
      var resultingBorderWidth, t2, t3,
        t1 = this.borderRadius,
        resultingBorderRadius = t1 == null ? toggleButtonsTheme.borderRadius : t1;
      if (resultingBorderRadius == null)
        resultingBorderRadius = B.BorderRadius_ww84;
      resultingBorderWidth = toggleButtonsTheme.borderWidth;
      if (resultingBorderWidth == null)
        resultingBorderWidth = 1;
      if ($length === 1) {
        t1 = resultingBorderWidth / 2;
        t2 = resultingBorderRadius.topLeft.$sub(0, new A.Radius(t1, t1));
        t3 = resultingBorderRadius.bottomLeft.$sub(0, new A.Radius(t1, t1));
        return new A.BorderRadius(t2, resultingBorderRadius.topRight.$sub(0, new A.Radius(t1, t1)), t3, resultingBorderRadius.bottomRight.$sub(0, new A.Radius(t1, t1)));
      } else if (this._isFirstButton$3(index, $length, textDirection)) {
        t1 = resultingBorderWidth / 2;
        return new A.BorderRadius(resultingBorderRadius.topLeft.$sub(0, new A.Radius(t1, t1)), B.Radius_0_0, resultingBorderRadius.bottomLeft.$sub(0, new A.Radius(t1, t1)), B.Radius_0_0);
      } else if (this._isLastButton$3(index, $length, textDirection)) {
        t1 = resultingBorderWidth / 2;
        return new A.BorderRadius(B.Radius_0_0, resultingBorderRadius.topRight.$sub(0, new A.Radius(t1, t1)), B.Radius_0_0, resultingBorderRadius.bottomRight.$sub(0, new A.Radius(t1, t1)));
      }
      return B.BorderRadius_ww84;
    },
    _getLeadingBorderSide$3(index, theme, toggleButtonsTheme) {
      var t1, t2, t3, t4, _this = this,
        resultingBorderWidth = toggleButtonsTheme.borderWidth;
      if (resultingBorderWidth == null)
        resultingBorderWidth = 1;
      t1 = _this.onPressed != null;
      if (t1) {
        t2 = _this.isSelected;
        t3 = t2.length;
        if (!(index < t3))
          return A.ioore(t2, index);
        if (!A.boolConversionCheck(t2[index]))
          if (index !== 0) {
            t4 = index - 1;
            if (!(t4 >= 0 && t4 < t3))
              return A.ioore(t2, t4);
            t4 = A.boolConversionCheck(t2[t4]);
            t2 = t4;
          } else
            t2 = false;
        else
          t2 = true;
      } else
        t2 = false;
      if (t2) {
        t1 = _this.selectedBorderColor;
        if (t1 == null)
          t1 = toggleButtonsTheme.selectedBorderColor;
        if (t1 == null) {
          t1 = theme.colorScheme.onSurface.value;
          t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
        }
        return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
      } else {
        if (t1) {
          t1 = _this.isSelected;
          if (!(index < t1.length))
            return A.ioore(t1, index);
          t1 = !A.boolConversionCheck(t1[index]);
        } else
          t1 = false;
        if (t1) {
          t1 = toggleButtonsTheme.borderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        } else {
          t1 = toggleButtonsTheme.disabledBorderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        }
      }
    },
    _getBorderSide$3(index, theme, toggleButtonsTheme) {
      var t1, t2, _this = this,
        resultingBorderWidth = toggleButtonsTheme.borderWidth;
      if (resultingBorderWidth == null)
        resultingBorderWidth = 1;
      t1 = _this.onPressed != null;
      if (t1) {
        t2 = _this.isSelected;
        if (!(index < t2.length))
          return A.ioore(t2, index);
        t2 = A.boolConversionCheck(t2[index]);
      } else
        t2 = false;
      if (t2) {
        t1 = _this.selectedBorderColor;
        if (t1 == null)
          t1 = toggleButtonsTheme.selectedBorderColor;
        if (t1 == null) {
          t1 = theme.colorScheme.onSurface.value;
          t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
        }
        return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
      } else {
        if (t1) {
          t1 = _this.isSelected;
          if (!(index < t1.length))
            return A.ioore(t1, index);
          t1 = !A.boolConversionCheck(t1[index]);
        } else
          t1 = false;
        if (t1) {
          t1 = toggleButtonsTheme.borderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        } else {
          t1 = toggleButtonsTheme.disabledBorderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        }
      }
    },
    _getTrailingBorderSide$3(index, theme, toggleButtonsTheme) {
      var resultingBorderWidth, t1, t2, _this = this;
      if (index !== _this.children.length - 1)
        return B.BorderSide_Q1M;
      resultingBorderWidth = toggleButtonsTheme.borderWidth;
      if (resultingBorderWidth == null)
        resultingBorderWidth = 1;
      t1 = _this.onPressed != null;
      if (t1) {
        t2 = _this.isSelected;
        if (!(index < t2.length))
          return A.ioore(t2, index);
        t2 = A.boolConversionCheck(t2[index]);
      } else
        t2 = false;
      if (t2) {
        t1 = _this.selectedBorderColor;
        if (t1 == null)
          t1 = toggleButtonsTheme.selectedBorderColor;
        if (t1 == null) {
          t1 = theme.colorScheme.onSurface.value;
          t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
        }
        return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
      } else {
        if (t1) {
          t1 = _this.isSelected;
          if (!(index < t1.length))
            return A.ioore(t1, index);
          t1 = !A.boolConversionCheck(t1[index]);
        } else
          t1 = false;
        if (t1) {
          t1 = toggleButtonsTheme.borderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        } else {
          t1 = toggleButtonsTheme.disabledBorderColor;
          if (t1 == null) {
            t1 = theme.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return new A.BorderSide(t1, resultingBorderWidth, B.BorderStyle_1, -1);
        }
      }
    },
    build$1(context) {
      var t1, t2, buttons,
        theme = A.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.ToggleButtonsTheme);
      t1 = A.Theme_of(context);
      t2 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t2.toString;
      buttons = A.List_List$generate(this.children.length, new C.ToggleButtons_build_closure(this, t2.textDirection, t1.toggleButtonsTheme, theme), true, type$.Widget);
      return new A.IntrinsicHeight(A.Row$(buttons, B.CrossAxisAlignment_3, null, B.MainAxisAlignment_0, B.MainAxisSize_0, null), null);
    }
  };
  C._ResolveFillColor.prototype = {
    resolve$1(states) {
      type$.Set_WidgetState._as(states);
      return states.contains$1(0, B.WidgetState_4) ? this.primary : null;
    }
  };
  C._DefaultFillColor.prototype = {
    resolve$1(states) {
      var t1;
      if (type$.Set_WidgetState._as(states).contains$1(0, B.WidgetState_4)) {
        t1 = this.colorScheme.primary;
        return A.Color$fromARGB(31, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
      }
      t1 = this.colorScheme.surface.value;
      return A.Color$fromARGB(0, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
    }
  };
  C._ToggleButtonDefaultOverlay.prototype = {
    resolve$1(states) {
      var t1, _this = this;
      type$.Set_WidgetState._as(states);
      if (_this.selected) {
        if (states.contains$1(0, B.WidgetState_2)) {
          t1 = _this.splashColor;
          if (t1 == null) {
            t1 = _this.colorScheme.primary;
            t1 = A.Color$fromARGB(41, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          return t1;
        }
        if (states.contains$1(0, B.WidgetState_0)) {
          t1 = _this.hoverColor;
          if (t1 == null) {
            t1 = _this.colorScheme.primary;
            t1 = A.Color$fromARGB(10, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          return t1;
        }
        if (states.contains$1(0, B.WidgetState_1)) {
          t1 = _this.focusColor;
          if (t1 == null) {
            t1 = _this.colorScheme.primary;
            t1 = A.Color$fromARGB(31, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          return t1;
        }
      } else if (_this.unselected) {
        if (states.contains$1(0, B.WidgetState_2)) {
          t1 = _this.splashColor;
          if (t1 == null)
            t1 = _this.highlightColor;
          if (t1 == null) {
            t1 = _this.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(41, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return t1;
        }
        if (states.contains$1(0, B.WidgetState_0)) {
          t1 = _this.hoverColor;
          if (t1 == null) {
            t1 = _this.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(10, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return t1;
        }
        if (states.contains$1(0, B.WidgetState_1)) {
          t1 = _this.focusColor;
          if (t1 == null) {
            t1 = _this.colorScheme.onSurface.value;
            t1 = A.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
          }
          return t1;
        }
      }
      return null;
    },
    toString$0(_) {
      var t6, t7, t8, t9, t10, t11, t12, t13, t14, _this = this,
        _s19_ = ",\n        focused: ",
        _s19_0 = ",\n        pressed: ",
        t1 = _this.hoverColor,
        t2 = A.S(t1),
        t3 = _this.colorScheme,
        t4 = t3.primary,
        t5 = A.Color$fromARGB(10, t4.get$value(t4) >>> 16 & 255, t4.get$value(t4) >>> 8 & 255, t4.get$value(t4) & 255);
      t5 = t5.toString$0(0);
      t6 = _this.focusColor;
      t7 = A.S(t6);
      t8 = A.Color$fromARGB(31, t4.get$value(t4) >>> 16 & 255, t4.get$value(t4) >>> 8 & 255, t4.get$value(t4) & 255);
      t8 = t8.toString$0(0);
      t9 = _this.splashColor;
      t10 = A.S(t9);
      t4 = A.Color$fromARGB(41, t4.get$value(t4) >>> 16 & 255, t4.get$value(t4) >>> 8 & 255, t4.get$value(t4) & 255);
      t4 = t4.toString$0(0);
      t1 = A.S(t1);
      t3 = t3.onSurface.value;
      t11 = t3 >>> 16 & 255;
      t12 = t3 >>> 8 & 255;
      t3 &= 255;
      t13 = A.Color$fromARGB(10, t11, t12, t3);
      t13 = t13.toString$0(0);
      t6 = A.S(t6);
      t14 = A.Color$fromARGB(31, t11, t12, t3);
      t14 = t14.toString$0(0);
      t9 = A.S(t9);
      t3 = A.Color$fromARGB(41, t11, t12, t3);
      return "    {\n      selected:\n        hovered: " + t2 + ", otherwise: " + t5 + _s19_ + t7 + ", otherwise: " + t8 + _s19_0 + t10 + ", otherwise: " + t4 + ",\n      unselected:\n        hovered: " + t1 + ", otherwise: " + t13 + _s19_ + t6 + ", otherwise: " + t14 + _s19_0 + t9 + ", otherwise: " + t3.toString$0(0) + ",\n      otherwise: null,\n    }\n    ";
    }
  };
  C._SelectToggleButton.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      t1 = new C._SelectToggleButtonRenderObject(_this.direction, _this.verticalDirection, _this.leadingBorderSide, _this.borderSide, _this.trailingBorderSide, _this.borderRadius, _this.isFirstButton, _this.isLastButton, t1.textDirection, null, new A._LayoutCacheStorage(), A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      type$._SelectToggleButtonRenderObject._as(renderObject);
      renderObject.set$leadingBorderSide(_this.leadingBorderSide);
      renderObject.set$borderSide(_this.borderSide);
      renderObject.set$trailingBorderSide(_this.trailingBorderSide);
      renderObject.set$borderRadius(0, _this.borderRadius);
      renderObject.set$isFirstButton(_this.isFirstButton);
      renderObject.set$isLastButton(_this.isLastButton);
      renderObject.set$direction(0, _this.direction);
      renderObject.set$verticalDirection(_this.verticalDirection);
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      renderObject.set$textDirection(t1.textDirection);
    }
  };
  C._SelectToggleButtonRenderObject.prototype = {
    set$direction(_, value) {
      if (this._toggle_buttons$_direction === value)
        return;
      this._toggle_buttons$_direction = value;
      this.markNeedsLayout$0();
    },
    set$verticalDirection(value) {
      if (this._toggle_buttons$_verticalDirection === value)
        return;
      this._toggle_buttons$_verticalDirection = value;
      this.markNeedsLayout$0();
    },
    set$leadingBorderSide(value) {
      if (this._leadingBorderSide.$eq(0, value))
        return;
      this._leadingBorderSide = value;
      this.markNeedsLayout$0();
    },
    set$borderSide(value) {
      if (this._borderSide.$eq(0, value))
        return;
      this._borderSide = value;
      this.markNeedsLayout$0();
    },
    set$trailingBorderSide(value) {
      if (this._trailingBorderSide.$eq(0, value))
        return;
      this._trailingBorderSide = value;
      this.markNeedsLayout$0();
    },
    set$borderRadius(_, value) {
      if (this._toggle_buttons$_borderRadius.$eq(0, value))
        return;
      this._toggle_buttons$_borderRadius = value;
      this.markNeedsLayout$0();
    },
    set$isFirstButton(value) {
      if (this._isFirstButton === value)
        return;
      this._isFirstButton = value;
      this.markNeedsLayout$0();
    },
    set$isLastButton(value) {
      if (this._isLastButton === value)
        return;
      this._isLastButton = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (this._toggle_buttons$_textDirection === value)
        return;
      this._toggle_buttons$_textDirection = value;
      this.markNeedsLayout$0();
    },
    computeDistanceToActualBaseline$1(baseline) {
      var t1, _this0, _this = this;
      type$.TextBaseline._as(baseline);
      t1 = _this.RenderObjectWithChildMixin__child;
      _this0 = t1 == null ? null : t1.getDistanceToActualBaseline$1(baseline);
      switch (_this._toggle_buttons$_direction.index) {
        case 0:
          t1 = A.BaselineOffset__(_this0, _this._borderSide.width);
          break;
        case 1:
          t1 = A.BaselineOffset__(_this0, _this._leadingBorderSide.width);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1, t2, _this = this;
      A._asDouble(width);
      t1 = _this._toggle_buttons$_direction;
      t2 = _this.RenderObjectWithChildMixin__child;
      return t1 === B.Axis_0 ? _this._borderSide.width * 2 + C._SelectToggleButtonRenderObject__maxHeight(t2, width) : _this._leadingBorderSide.width + C._SelectToggleButtonRenderObject__maxHeight(t2, width) + _this._trailingBorderSide.width;
    },
    computeMinIntrinsicHeight$1(width) {
      var t1, t2, t3, _this = this;
      A._asDouble(width);
      t1 = _this._toggle_buttons$_direction;
      t2 = _this.RenderObjectWithChildMixin__child;
      if (t1 === B.Axis_0) {
        t1 = _this._borderSide;
        if (t2 == null)
          t2 = null;
        else {
          t3 = type$.double;
          t3 = t2._computeIntrinsics$2$3(B._IntrinsicDimension_2, width, t2.get$computeMinIntrinsicHeight(), t3, t3);
          t2 = t3;
        }
        if (t2 == null)
          t2 = 0;
        t2 = t1.width * 2 + t2;
        t1 = t2;
      } else
        t1 = _this._leadingBorderSide.width + C._SelectToggleButtonRenderObject__maxHeight(t2, width) + _this._trailingBorderSide.width;
      return t1;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t1, t2, _this = this;
      A._asDouble(height);
      t1 = _this._toggle_buttons$_direction;
      t2 = _this.RenderObjectWithChildMixin__child;
      return t1 === B.Axis_0 ? _this._leadingBorderSide.width + C._SelectToggleButtonRenderObject__maxWidth(t2, height) + _this._trailingBorderSide.width : _this._borderSide.width * 2 + C._SelectToggleButtonRenderObject__maxWidth(t2, height);
    },
    computeMinIntrinsicWidth$1(height) {
      var t1, t2, _this = this;
      A._asDouble(height);
      t1 = _this._toggle_buttons$_direction;
      t2 = _this.RenderObjectWithChildMixin__child;
      return t1 === B.Axis_0 ? _this._leadingBorderSide.width + C._SelectToggleButtonRenderObject__minWidth(t2, height) + _this._trailingBorderSide.width : _this._borderSide.width * 2 + C._SelectToggleButtonRenderObject__minWidth(t2, height);
    },
    computeDryLayout$1(constraints) {
      return this._toggle_buttons$_computeSize$2$constraints$layoutChild(constraints, A.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
    },
    get$_childPadding() {
      var t1, t2, t3, _this = this;
      switch (_this._toggle_buttons$_direction.index) {
        case 0:
          t1 = _this._leadingBorderSide;
          t2 = _this._trailingBorderSide;
          t3 = _this._borderSide.width;
          t3 = new A.EdgeInsetsDirectional(t1.width, t3, t2.width, t3);
          t1 = t3;
          break;
        case 1:
          t1 = _this._borderSide.width;
          t1 = new A.EdgeInsetsDirectional(t1, _this._leadingBorderSide.width, t1, _this._trailingBorderSide.width);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    computeDryBaseline$2(constraints, baseline) {
      var t1, childBaseline, _this = this, _null = null;
      type$.BoxConstraints._as(constraints);
      type$.TextBaseline._as(baseline);
      t1 = _this.RenderObjectWithChildMixin__child;
      childBaseline = t1 == null ? _null : t1.getDryBaseline$2(constraints.deflate$1(_this.get$_childPadding()), baseline);
      if (childBaseline == null)
        return _null;
      switch (_this._toggle_buttons$_direction.index) {
        case 0:
          t1 = _this._borderSide.width;
          break;
        case 1:
          switch (_this._toggle_buttons$_verticalDirection.index) {
            case 1:
              t1 = _this._leadingBorderSide.width;
              break;
            case 0:
              t1 = _this._trailingBorderSide.width;
              break;
            default:
              t1 = _null;
          }
          break;
        default:
          t1 = _null;
      }
      if (typeof t1 !== "number")
        return A.iae(t1);
      return childBaseline + t1;
    },
    performLayout$0() {
      var t1, t2, _this = this;
      _this._box$_size = _this._toggle_buttons$_computeSize$2$constraints$layoutChild(type$.BoxConstraints._as(A.RenderObject.prototype.get$constraints.call(_this)), A.layout_helper_ChildLayoutHelper_layoutChild$closure());
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        return;
      t1 = t1.parentData;
      t1.toString;
      type$.BoxParentData._as(t1);
      if (_this._toggle_buttons$_direction === B.Axis_0) {
        switch (_this._toggle_buttons$_textDirection.index) {
          case 1:
            t2 = new A.Offset(_this._leadingBorderSide.width, _this._borderSide.width);
            break;
          case 0:
            t2 = new A.Offset(_this._trailingBorderSide.width, _this._borderSide.width);
            break;
          default:
            t2 = null;
        }
        t1.set$offset(0, t2);
      } else {
        switch (_this._toggle_buttons$_verticalDirection.index) {
          case 1:
            t2 = new A.Offset(_this._borderSide.width, _this._leadingBorderSide.width);
            break;
          case 0:
            t2 = new A.Offset(_this._borderSide.width, _this._trailingBorderSide.width);
            break;
          default:
            t2 = null;
        }
        t1.set$offset(0, t2);
      }
    },
    _toggle_buttons$_computeSize$2$constraints$layoutChild(constraints, layoutChild) {
      var child, t1, t2, childPadding, _this = this;
      type$.Size_Function_RenderBox_BoxConstraints._as(layoutChild);
      child = _this.RenderObjectWithChildMixin__child;
      if (child == null) {
        t1 = _this._leadingBorderSide.width + _this._trailingBorderSide.width;
        t2 = _this._borderSide.width * 2;
        switch (_this._toggle_buttons$_direction.index) {
          case 0:
            t1 = constraints.constrain$1(new A.Size(t1, t2));
            break;
          case 1:
            t1 = constraints.constrain$1(new A.Size(t2, t1));
            break;
          default:
            t1 = null;
        }
        return t1;
      }
      childPadding = _this.get$_childPadding();
      return constraints.constrain$1(childPadding.inflateSize$1(layoutChild.call$2(child, constraints.deflate$1(childPadding))));
    },
    paint$2(context, offset) {
      var bottomRight, t1, t2, startX, t3, center, t4, t5, t6, t7, rrect, tlCorner, t8, t9, t10, t11, t12, blCorner, t13, t14, t15, trCorner, t16, t17, t18, t19, brCorner, leadingPaint, leadingPath, leftPath, endingPaint, endingPath, horizontalPaint, horizontalPaths, topPath, paint, paths, bottomPath, _this = this;
      _this.super$RenderShiftedBox$paint(context, offset);
      bottomRight = _this.get$size(0).bottomRight$1(0, offset);
      t1 = offset._dx;
      t2 = offset._dy;
      startX = bottomRight._dx;
      t3 = bottomRight._dy;
      center = new A.Rect(t1, t2, startX, t3).inflate$1(-(_this._borderSide.width / 2));
      t4 = _this._toggle_buttons$_borderRadius;
      t5 = t4.topLeft;
      t5 = t5.x * t5.y !== 0 ? t5 : B.Radius_0_0;
      t6 = t4.topRight;
      t6 = t6.x * t6.y !== 0 ? t6 : B.Radius_0_0;
      t7 = t4.bottomLeft;
      t7 = t7.x * t7.y !== 0 ? t7 : B.Radius_0_0;
      t4 = t4.bottomRight;
      rrect = A.RRect$fromRectAndCorners(center, t7, t4.x * t4.y !== 0 ? t4 : B.Radius_0_0, t5, t6).scaleRadii$0();
      t4 = rrect.left;
      t5 = rrect.top;
      t6 = rrect.tlRadiusX;
      t7 = rrect.tlRadiusY;
      tlCorner = new A.Rect(t4, t5, t4 + t6 * 2, t5 + t7 * 2);
      t8 = rrect.bottom;
      t9 = rrect.blRadiusY;
      t10 = t9 * 2;
      t11 = t8 - t10;
      t12 = rrect.blRadiusX;
      blCorner = new A.Rect(t4, t11, t4 + t12 * 2, t11 + t10);
      t10 = rrect.right;
      t11 = rrect.trRadiusX;
      t13 = t11 * 2;
      t14 = t10 - t13;
      t15 = rrect.trRadiusY;
      trCorner = new A.Rect(t14, t5, t14 + t13, t5 + t15 * 2);
      t13 = rrect.brRadiusX;
      t14 = t13 * 2;
      t16 = t10 - t14;
      t17 = rrect.brRadiusY;
      t18 = t17 * 2;
      t19 = t8 - t18;
      brCorner = new A.Rect(t16, t19, t16 + t14, t19 + t18);
      leadingPaint = _this._leadingBorderSide.toPaint$0();
      t14 = _this._isFirstButton;
      if (t14 && _this._isLastButton) {
        leadingPath = $.$get$_renderer().createPath$0();
        leadingPath.moveTo$2(0, t13 === 0 ? startX : t10 - t13, t8);
        leadingPath.lineTo$2(0, t4 + t12, t8);
        leadingPath.addArc$3(blCorner, 1.5707963267948966, 1.5707963267948966);
        leadingPath.lineTo$2(0, t4, t5 + t7);
        leadingPath.addArc$3(tlCorner, 3.141592653589793, 1.5707963267948966);
        leadingPath.lineTo$2(0, t10 - t11, t5);
        leadingPath.addArc$3(trCorner, 4.71238898038469, 1.5707963267948966);
        leadingPath.lineTo$2(0, t10, t8 - t17);
        leadingPath.addArc$3(brCorner, 0, 1.5707963267948966);
        context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
        return;
      }
      if (_this._toggle_buttons$_direction === B.Axis_0)
        switch (_this._toggle_buttons$_textDirection.index) {
          case 1:
            if (_this._isLastButton) {
              t1 = $.$get$_renderer();
              leftPath = t1.createPath$0();
              leftPath.moveTo$2(0, t4, t8 + _this._leadingBorderSide.width / 2);
              leftPath.lineTo$2(0, t4, t5 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(leftPath, leadingPaint);
              endingPaint = _this._trailingBorderSide.toPaint$0();
              endingPath = t1.createPath$0();
              endingPath.moveTo$2(0, t4 + _this._borderSide.width / 2, t5);
              endingPath.lineTo$2(0, t10 - t11, t5);
              endingPath.addArc$3(trCorner, 4.71238898038469, 1.5707963267948966);
              endingPath.lineTo$2(0, t10, t8 - t17);
              endingPath.addArc$3(brCorner, 0, 1.5707963267948966);
              endingPath.lineTo$2(0, t4 + _this._borderSide.width / 2, t8);
              context.get$canvas(context).drawPath$2(endingPath, endingPaint);
            } else if (t14) {
              leadingPath = $.$get$_renderer().createPath$0();
              leadingPath.moveTo$2(0, startX, t8);
              leadingPath.lineTo$2(0, t4 + t12, t8);
              leadingPath.addArc$3(blCorner, 1.5707963267948966, 1.5707963267948966);
              leadingPath.lineTo$2(0, t4, t5 + t7);
              leadingPath.addArc$3(tlCorner, 3.141592653589793, 1.5707963267948966);
              leadingPath.lineTo$2(0, startX, t5);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
            } else {
              t1 = $.$get$_renderer();
              leadingPath = t1.createPath$0();
              leadingPath.moveTo$2(0, t4, t8 + _this._leadingBorderSide.width / 2);
              leadingPath.lineTo$2(0, t4, t5 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
              horizontalPaint = _this._borderSide.toPaint$0();
              horizontalPaths = t1.createPath$0();
              horizontalPaths.moveTo$2(0, t4 + _this._borderSide.width / 2, t5);
              t11 = startX - t11;
              horizontalPaths.lineTo$2(0, t11, t5);
              horizontalPaths.moveTo$2(0, t4 + _this._borderSide.width / 2 + t6, t8);
              horizontalPaths.lineTo$2(0, t11, t8);
              context.get$canvas(context).drawPath$2(horizontalPaths, horizontalPaint);
            }
            break;
          case 0:
            if (_this._isLastButton) {
              t1 = $.$get$_renderer();
              leadingPath = t1.createPath$0();
              leadingPath.moveTo$2(0, t10, t8 + _this._leadingBorderSide.width / 2);
              leadingPath.lineTo$2(0, t10, t5 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
              endingPaint = _this._trailingBorderSide.toPaint$0();
              endingPath = t1.createPath$0();
              endingPath.moveTo$2(0, t10 - _this._borderSide.width / 2, t5);
              endingPath.lineTo$2(0, t4 + t6, t5);
              endingPath.addArc$3(tlCorner, 4.71238898038469, -1.5707963267948966);
              endingPath.lineTo$2(0, t4, t8 - t9);
              endingPath.addArc$3(blCorner, 3.141592653589793, -1.5707963267948966);
              endingPath.lineTo$2(0, t10 - _this._borderSide.width / 2, t8);
              context.get$canvas(context).drawPath$2(endingPath, endingPaint);
            } else if (t14) {
              leadingPath = $.$get$_renderer().createPath$0();
              leadingPath.moveTo$2(0, t1, t8);
              leadingPath.lineTo$2(0, t10 - t13, t8);
              leadingPath.addArc$3(brCorner, 1.5707963267948966, -1.5707963267948966);
              leadingPath.lineTo$2(0, t10, t5 + t15);
              leadingPath.addArc$3(trCorner, 0, -1.5707963267948966);
              leadingPath.lineTo$2(0, t1, t5);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
            } else {
              t2 = $.$get$_renderer();
              leadingPath = t2.createPath$0();
              leadingPath.moveTo$2(0, t10, t8 + _this._leadingBorderSide.width / 2);
              leadingPath.lineTo$2(0, t10, t5 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
              horizontalPaint = _this._borderSide.toPaint$0();
              horizontalPaths = t2.createPath$0();
              horizontalPaths.moveTo$2(0, t10 - _this._borderSide.width / 2, t5);
              t6 = t1 - t6;
              horizontalPaths.lineTo$2(0, t6, t5);
              horizontalPaths.moveTo$2(0, t10 - _this._borderSide.width / 2 + t11, t8);
              horizontalPaths.lineTo$2(0, t6, t8);
              context.get$canvas(context).drawPath$2(horizontalPaths, horizontalPaint);
            }
            break;
        }
      else
        switch (_this._toggle_buttons$_verticalDirection.index) {
          case 1:
            if (_this._isLastButton) {
              t3 = $.$get$_renderer();
              topPath = t3.createPath$0();
              topPath.moveTo$2(0, t1, t2 + _this._leadingBorderSide.width / 2);
              topPath.lineTo$2(0, startX, t2 + _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(topPath, leadingPaint);
              endingPaint = _this._trailingBorderSide.toPaint$0();
              endingPath = t3.createPath$0();
              endingPath.moveTo$2(0, t4, t5 + _this._leadingBorderSide.width / 2);
              endingPath.lineTo$2(0, t4, t8 - t9);
              endingPath.addArc$3(blCorner, 9.42477796076938, -1.5707963267948966);
              endingPath.lineTo$2(0, t10 - t12, t8);
              endingPath.addArc$3(brCorner, 1.5707963267948966, -1.5707963267948966);
              endingPath.lineTo$2(0, t10, t5 + _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(endingPath, endingPaint);
            } else if (t14) {
              leadingPath = $.$get$_renderer().createPath$0();
              leadingPath.moveTo$2(0, t4, t3);
              leadingPath.lineTo$2(0, t4, t5 + t6);
              leadingPath.addArc$3(tlCorner, 3.141592653589793, 1.5707963267948966);
              leadingPath.lineTo$2(0, t10 - t11, t5);
              leadingPath.addArc$3(trCorner, 4.71238898038469, 1.5707963267948966);
              leadingPath.lineTo$2(0, t10, t3);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
            } else {
              t5 = $.$get$_renderer();
              topPath = t5.createPath$0();
              topPath.moveTo$2(0, t1, t2 + _this._leadingBorderSide.width / 2);
              topPath.lineTo$2(0, startX, t2 + _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(topPath, leadingPaint);
              paint = _this._borderSide.toPaint$0();
              paths = t5.createPath$0();
              paths.moveTo$2(0, t4, t2 + _this._leadingBorderSide.width);
              paths.lineTo$2(0, t4, t3);
              paths.moveTo$2(0, t10, t2 + _this._leadingBorderSide.width);
              paths.lineTo$2(0, t10, t3);
              context.get$canvas(context).drawPath$2(paths, paint);
            }
            break;
          case 0:
            if (_this._isLastButton) {
              t2 = $.$get$_renderer();
              bottomPath = t2.createPath$0();
              bottomPath.moveTo$2(0, t1, t3 - _this._leadingBorderSide.width / 2);
              bottomPath.lineTo$2(0, startX, t3 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(bottomPath, leadingPaint);
              endingPaint = _this._trailingBorderSide.toPaint$0();
              endingPath = t2.createPath$0();
              endingPath.moveTo$2(0, t4, t8 - _this._leadingBorderSide.width / 2);
              endingPath.lineTo$2(0, t4, t5 + t7);
              endingPath.addArc$3(tlCorner, 3.141592653589793, 1.5707963267948966);
              endingPath.lineTo$2(0, t10 - t11, t5);
              endingPath.addArc$3(trCorner, 4.71238898038469, 1.5707963267948966);
              endingPath.lineTo$2(0, t10, t8 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(endingPath, endingPaint);
            } else if (t14) {
              leadingPath = $.$get$_renderer().createPath$0();
              leadingPath.moveTo$2(0, t4, t2);
              leadingPath.lineTo$2(0, t4, t8 - t9);
              leadingPath.addArc$3(blCorner, 3.141592653589793, -1.5707963267948966);
              leadingPath.lineTo$2(0, t10 - t13, t8);
              leadingPath.addArc$3(brCorner, 1.5707963267948966, -1.5707963267948966);
              leadingPath.lineTo$2(0, t10, t2);
              context.get$canvas(context).drawPath$2(leadingPath, leadingPaint);
            } else {
              t5 = $.$get$_renderer();
              bottomPath = t5.createPath$0();
              bottomPath.moveTo$2(0, t1, t3 - _this._leadingBorderSide.width / 2);
              bottomPath.lineTo$2(0, startX, t3 - _this._leadingBorderSide.width / 2);
              context.get$canvas(context).drawPath$2(bottomPath, leadingPaint);
              paint = _this._borderSide.toPaint$0();
              paths = t5.createPath$0();
              paths.moveTo$2(0, t4, t2);
              paths.lineTo$2(0, t4, t3 - _this._leadingBorderSide.width);
              paths.moveTo$2(0, t10, t2);
              paths.lineTo$2(0, t10, t3 - _this._leadingBorderSide.width);
              context.get$canvas(context).drawPath$2(paths, paint);
            }
            break;
        }
    }
  };
  C._InputPadding.prototype = {
    createRenderObject$1(context) {
      var t1 = new C._RenderInputPadding(this.minSize, this.direction, null, new A._LayoutCacheStorage(), A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderInputPadding._as(renderObject);
      renderObject.set$minSize(this.minSize);
      renderObject.set$direction(0, this.direction);
    }
  };
  C._RenderInputPadding.prototype = {
    set$minSize(value) {
      if (this._minSize.$eq(0, value))
        return;
      this._minSize = value;
      this.markNeedsLayout$0();
    },
    set$direction(_, value) {
      if (this._toggle_buttons$_direction === value)
        return;
      this._toggle_buttons$_direction = value;
      this.markNeedsLayout$0();
    },
    computeMinIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = type$.double;
        return Math.max(t1._computeIntrinsics$2$3(B._IntrinsicDimension_0, height, t1.get$computeMinIntrinsicWidth(), t2, t2), this._minSize._dx);
      }
      return 0;
    },
    computeMinIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = type$.double;
        return Math.max(t1._computeIntrinsics$2$3(B._IntrinsicDimension_2, width, t1.get$computeMinIntrinsicHeight(), t2, t2), this._minSize._dy);
      }
      return 0;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = type$.double;
        return Math.max(t1._computeIntrinsics$2$3(B._IntrinsicDimension_1, height, t1.get$computeMaxIntrinsicWidth(), t2, t2), this._minSize._dx);
      }
      return 0;
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = type$.double;
        return Math.max(t1._computeIntrinsics$2$3(B._IntrinsicDimension_3, width, t1.get$computeMaxIntrinsicHeight(), t2, t2), this._minSize._dy);
      }
      return 0;
    },
    _toggle_buttons$_computeSize$2$constraints$layoutChild(constraints, layoutChild) {
      var t1, childSize, t2;
      type$.Size_Function_RenderBox_BoxConstraints._as(layoutChild);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        childSize = layoutChild.call$2(t1, constraints);
        t1 = childSize._dx;
        t2 = this._minSize;
        return constraints.constrain$1(new A.Size(Math.max(t1, t2._dx), Math.max(childSize._dy, t2._dy)));
      }
      return B.Size_0_0;
    },
    computeDryLayout$1(constraints) {
      return this._toggle_buttons$_computeSize$2$constraints$layoutChild(constraints, A.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
    },
    computeDryBaseline$2(constraints, baseline) {
      var child, result, t2, t3,
        t1 = type$.BoxConstraints;
      t1._as(constraints);
      type$.TextBaseline._as(baseline);
      child = this.RenderObjectWithChildMixin__child;
      if (child == null)
        return null;
      result = child.getDryBaseline$2(constraints, baseline);
      if (result == null)
        return null;
      t2 = type$.Size;
      t3 = child._computeIntrinsics$2$3(B.C__DryLayout, constraints, child.get$_computeDryLayout(), t1, t2);
      return result + B.Alignment_0_0.alongOffset$1(type$.Offset._as(this._computeIntrinsics$2$3(B.C__DryLayout, constraints, this.get$_computeDryLayout(), t1, t2).$sub(0, t3)))._dy;
    },
    performLayout$0() {
      var t1, _this = this;
      _this._box$_size = _this._toggle_buttons$_computeSize$2$constraints$layoutChild(type$.BoxConstraints._as(A.RenderObject.prototype.get$constraints.call(_this)), A.layout_helper_ChildLayoutHelper_layoutChild$closure());
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1 = t1.parentData;
        t1.toString;
        type$.BoxParentData._as(t1).offset = B.Alignment_0_0.alongOffset$1(type$.Offset._as(_this.get$size(0).$sub(0, _this.RenderObjectWithChildMixin__child.get$size(0))));
      }
    },
    hitTest$2$position(result, position) {
      var t1, _this = this;
      if (!_this.get$size(0).contains$1(0, position))
        return false;
      switch (_this._toggle_buttons$_direction.index) {
        case 0:
          t1 = new A.Offset(position._dx, _this.RenderObjectWithChildMixin__child.get$size(0)._dy / 2);
          break;
        case 1:
          t1 = new A.Offset(_this.RenderObjectWithChildMixin__child.get$size(0)._dx / 2, position._dy);
          break;
        default:
          t1 = null;
      }
      return result.addWithRawTransform$3$hitTest$position$transform(new C._RenderInputPadding_hitTest_closure(_this, t1), t1, A.MatrixUtils_forceToPoint(t1));
    }
  };
  C.__DefaultFillColor_MaterialStateProperty_Diagnosticable.prototype = {};
  C.__ResolveFillColor_MaterialStateProperty_Diagnosticable.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["double(double)"]);
  C.ToggleButtons_build_closure.prototype = {
    call$1(index) {
      var leadingBorderSide, borderSide, trailingBorderSide, t5, t6, t7, effectiveFillColor, currentColor, currentTextStyle, currentConstraints, minimumSize, maximumSize, minPaddingSize, t8, t9, t10, t11, t12, button, _this = this, _null = null,
        t1 = _this.$this,
        t2 = t1.children,
        t3 = _this.textDirection,
        t4 = _this.toggleButtonsTheme,
        edgeBorderRadius = t1._getEdgeBorderRadius$4(index, t2.length, t3, t4),
        clipBorderRadius = t1._getClipBorderRadius$4(index, t2.length, t3, t4);
      t3 = _this.theme;
      leadingBorderSide = t1._getLeadingBorderSide$3(index, t3, t4);
      borderSide = t1._getBorderSide$3(index, t3, t4);
      trailingBorderSide = t1._getTrailingBorderSide$3(index, t3, t4);
      t5 = A.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState);
      t6 = t1.isSelected;
      if (!(index < t6.length))
        return A.ioore(t6, index);
      if (A.boolConversionCheck(t6[index]) && t1.onPressed != null)
        t5.add$1(0, B.WidgetState_4);
      t7 = t1.onPressed == null;
      if (t7)
        t5.add$1(0, B.WidgetState_6);
      effectiveFillColor = new C._ResolveFillColor(t4.fillColor).resolve$1(t5);
      if (effectiveFillColor == null)
        effectiveFillColor = new C._DefaultFillColor(t3.colorScheme).resolve$1(t5);
      t5 = !t7;
      if (t5) {
        if (!(index < t6.length))
          return A.ioore(t6, index);
        t7 = A.boolConversionCheck(t6[index]);
      } else
        t7 = false;
      if (t7) {
        currentColor = t4.selectedColor;
        if (currentColor == null)
          currentColor = t3.colorScheme.primary;
      } else {
        if (t5) {
          if (!(index < t6.length))
            return A.ioore(t6, index);
          t7 = !A.boolConversionCheck(t6[index]);
        } else
          t7 = false;
        if (t7) {
          currentColor = t4.color;
          if (currentColor == null) {
            t7 = t3.colorScheme.onSurface.value;
            currentColor = A.Color$fromARGB(222, t7 >>> 16 & 255, t7 >>> 8 & 255, t7 & 255);
          }
        } else {
          currentColor = t4.disabledColor;
          if (currentColor == null) {
            t7 = t3.colorScheme.onSurface.value;
            currentColor = A.Color$fromARGB(97, t7 >>> 16 & 255, t7 >>> 8 & 255, t7 & 255);
          }
        }
      }
      currentTextStyle = t4.textStyle;
      if (currentTextStyle == null) {
        t7 = t3.textTheme.bodyMedium;
        t7.toString;
        currentTextStyle = t7;
      }
      currentConstraints = t4.constraints;
      t7 = currentConstraints == null;
      minimumSize = t7 ? _null : new A.Size(A.clampDouble(0, currentConstraints.minWidth, currentConstraints.maxWidth), A.clampDouble(0, currentConstraints.minHeight, currentConstraints.maxHeight));
      if (minimumSize == null)
        minimumSize = B.Size_48_48;
      maximumSize = t7 ? _null : new A.Size(A.clampDouble(1 / 0, currentConstraints.minWidth, currentConstraints.maxWidth), A.clampDouble(1 / 0, currentConstraints.minHeight, currentConstraints.maxHeight));
      switch (t3.materialTapTargetSize.index) {
        case 0:
          switch (0) {
            case 0:
              break;
          }
          minPaddingSize = D.Size_0_48;
          break;
        case 1:
          minPaddingSize = B.Size_0_0;
          break;
        default:
          minPaddingSize = _null;
      }
      t8 = t2.length;
      t9 = type$.WidgetStatePropertyAll_nullable_Color;
      if (t5) {
        if (!(index < t6.length))
          return A.ioore(t6, index);
        t10 = A.boolConversionCheck(t6[index]);
      } else
        t10 = false;
      if (t5) {
        if (!(index < t6.length))
          return A.ioore(t6, index);
        t11 = !A.boolConversionCheck(t6[index]);
      } else
        t11 = false;
      t12 = type$.WidgetStatePropertyAll_nullable_Size;
      t4 = A.ButtonStyle$(B.Alignment_0_0, B.Duration_200000, _null, new A.WidgetStatePropertyAll(effectiveFillColor, t9), B.WidgetStatePropertyAll_0, true, _null, _null, new A.WidgetStatePropertyAll(currentColor, t9), _null, _null, new A.WidgetStatePropertyAll(maximumSize, t12), new A.WidgetStatePropertyAll(minimumSize, t12), new A.WidgetStatePropertyAll(_null, type$.WidgetStatePropertyAll_nullable_MouseCursor), new C._ToggleButtonDefaultOverlay(t10, t11, t3.colorScheme, t4.focusColor, t4.highlightColor, t4.hoverColor, t4.splashColor), D.WidgetStatePropertyAll_wEo, _null, D.WidgetStatePropertyAll_AQj, _null, B.C__InkRippleFactory, _null, B.MaterialTapTargetSize_1, new A.WidgetStatePropertyAll(currentTextStyle.copyWith$1$color(currentColor), type$.WidgetStatePropertyAll_nullable_TextStyle), B.VisualDensity_0_0);
      t1 = t5 ? new C.ToggleButtons_build__closure(t1, index) : _null;
      if (!(index < t2.length))
        return A.ioore(t2, index);
      button = new C._SelectToggleButton(leadingBorderSide, borderSide, trailingBorderSide, edgeBorderRadius, index === 0, index === t8 - 1, B.Axis_0, B.VerticalDirection_1, A.ClipRRect$(clipBorderRadius, A.TextButton$(false, t2[index], _null, _null, B.IconAlignment_0, _null, _null, _null, _null, t1, _null, t4), B.Clip_2), _null);
      if (!t7)
        button = A.Center$(button, _null, _null);
      if (!(index < t6.length))
        return A.ioore(t6, index);
      t1 = t6[index];
      return new A.MergeSemantics(new A.Semantics(A.SemanticsProperties$(_null, _null, _null, _null, _null, _null, t1, _null, _null, _null, t5, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), true, false, false, false, new C._InputPadding(minPaddingSize, B.Axis_0, button, _null), _null), _null);
    },
    $signature: 897
  };
  C.ToggleButtons_build__closure.prototype = {
    call$0() {
      this.$this.onPressed.call$1(this.index);
    },
    $signature: 0
  };
  C._RenderInputPadding_hitTest_closure.prototype = {
    call$2(result, position) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, this.center);
    },
    $signature: 12
  };
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    var _;
    _instance_1_u(_ = C._SelectToggleButtonRenderObject.prototype, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 0);
    _instance_1_u(_ = C._RenderInputPadding.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(C.ToggleButtons, A.StatelessWidget);
    _inherit(C.ToggleButtons_build_closure, A.Closure);
    _inherit(C.ToggleButtons_build__closure, A.Closure0Args);
    _inheritMany(A.WidgetStateProperty, [C.__ResolveFillColor_MaterialStateProperty_Diagnosticable, C.__DefaultFillColor_MaterialStateProperty_Diagnosticable, C._ToggleButtonDefaultOverlay]);
    _inherit(C._ResolveFillColor, C.__ResolveFillColor_MaterialStateProperty_Diagnosticable);
    _inherit(C._DefaultFillColor, C.__DefaultFillColor_MaterialStateProperty_Diagnosticable);
    _inheritMany(A.SingleChildRenderObjectWidget, [C._SelectToggleButton, C._InputPadding]);
    _inheritMany(A.RenderShiftedBox, [C._SelectToggleButtonRenderObject, C._RenderInputPadding]);
    _inherit(C._RenderInputPadding_hitTest_closure, A.Closure2Args);
    _mixin(C.__DefaultFillColor_MaterialStateProperty_Diagnosticable, A.Diagnosticable);
    _mixin(C.__ResolveFillColor_MaterialStateProperty_Diagnosticable, A.Diagnosticable);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"ToggleButtons":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ResolveFillColor":{"WidgetStateProperty":["Color?"]},"_DefaultFillColor":{"WidgetStateProperty":["Color"]},"_ToggleButtonDefaultOverlay":{"WidgetStateProperty":["Color?"]},"_SelectToggleButton":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SelectToggleButtonRenderObject":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"_InputPadding":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderInputPadding":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"ToggleButtonsTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      BoxConstraints: findType("BoxConstraints"),
      BoxParentData: findType("BoxParentData"),
      ContainerLayer: findType("ContainerLayer0"),
      Directionality: findType("Directionality"),
      Offset: findType("Offset"),
      Set_WidgetState: findType("Set<WidgetState>"),
      Size: findType("Size"),
      Size_Function_RenderBox_BoxConstraints: findType("Size(RenderBox,BoxConstraints)"),
      TextBaseline: findType("TextBaseline"),
      ToggleButtonsTheme: findType("ToggleButtonsTheme"),
      Widget: findType("Widget"),
      WidgetState: findType("WidgetState"),
      WidgetStatePropertyAll_nullable_Color: findType("WidgetStatePropertyAll<Color?>"),
      WidgetStatePropertyAll_nullable_MouseCursor: findType("WidgetStatePropertyAll<MouseCursor?>"),
      WidgetStatePropertyAll_nullable_Size: findType("WidgetStatePropertyAll<Size?>"),
      WidgetStatePropertyAll_nullable_TextStyle: findType("WidgetStatePropertyAll<TextStyle?>"),
      _RenderInputPadding: findType("_RenderInputPadding"),
      _SelectToggleButtonRenderObject: findType("_SelectToggleButtonRenderObject"),
      double: findType("double")
    };
  })();
  (function constants() {
    D.Size_0_48 = new A.Size(0, 48);
    D.WidgetStatePropertyAll_AQj = new A.WidgetStatePropertyAll(B.RoundedRectangleBorder_NYu4, A.findType("WidgetStatePropertyAll<OutlinedBorder>"));
    D.WidgetStatePropertyAll_wEo = new A.WidgetStatePropertyAll(B.EdgeInsets_0_0_0_0, A.findType("WidgetStatePropertyAll<EdgeInsetsGeometry>"));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_587", e: "endPart", h: h});
})($__dart_deferred_initializers__, "6sYAAW+++ewT31DMmrorYCClQsI=");
;